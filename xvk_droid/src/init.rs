use std::{ffi::c_void, mem::transmute};
use crate::dlfcn::dlsym;
use crate::pfn::*;

pub unsafe fn init(handle: *mut c_void) {
    VK_CREATE_INSTANCE = transmute(dlsym(handle, c"vkCreateInstance".as_ptr()));
    VK_DESTROY_INSTANCE = transmute(dlsym(handle, c"vkDestroyInstance".as_ptr()));
    VK_ENUMERATE_PHYSICAL_DEVICES = transmute(dlsym(handle, c"vkEnumeratePhysicalDevices".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_FEATURES = transmute(dlsym(handle, c"vkGetPhysicalDeviceFeatures".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_FORMAT_PROPERTIES = transmute(dlsym(handle, c"vkGetPhysicalDeviceFormatProperties".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_IMAGE_FORMAT_PROPERTIES = transmute(dlsym(handle, c"vkGetPhysicalDeviceImageFormatProperties".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_PROPERTIES = transmute(dlsym(handle, c"vkGetPhysicalDeviceProperties".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_QUEUE_FAMILY_PROPERTIES = transmute(dlsym(handle, c"vkGetPhysicalDeviceQueueFamilyProperties".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_MEMORY_PROPERTIES = transmute(dlsym(handle, c"vkGetPhysicalDeviceMemoryProperties".as_ptr()));
    VK_GET_INSTANCE_PROC_ADDR = transmute(dlsym(handle, c"vkGetInstanceProcAddr".as_ptr()));
    VK_GET_DEVICE_PROC_ADDR = transmute(dlsym(handle, c"vkGetDeviceProcAddr".as_ptr()));
    VK_CREATE_DEVICE = transmute(dlsym(handle, c"vkCreateDevice".as_ptr()));
    VK_DESTROY_DEVICE = transmute(dlsym(handle, c"vkDestroyDevice".as_ptr()));
    VK_ENUMERATE_INSTANCE_EXTENSION_PROPERTIES = transmute(dlsym(handle, c"vkEnumerateInstanceExtensionProperties".as_ptr()));
    VK_ENUMERATE_DEVICE_EXTENSION_PROPERTIES = transmute(dlsym(handle, c"vkEnumerateDeviceExtensionProperties".as_ptr()));
    VK_ENUMERATE_INSTANCE_LAYER_PROPERTIES = transmute(dlsym(handle, c"vkEnumerateInstanceLayerProperties".as_ptr()));
    VK_ENUMERATE_DEVICE_LAYER_PROPERTIES = transmute(dlsym(handle, c"vkEnumerateDeviceLayerProperties".as_ptr()));
    VK_GET_DEVICE_QUEUE = transmute(dlsym(handle, c"vkGetDeviceQueue".as_ptr()));
    VK_QUEUE_SUBMIT = transmute(dlsym(handle, c"vkQueueSubmit".as_ptr()));
    VK_QUEUE_WAIT_IDLE = transmute(dlsym(handle, c"vkQueueWaitIdle".as_ptr()));
    VK_DEVICE_WAIT_IDLE = transmute(dlsym(handle, c"vkDeviceWaitIdle".as_ptr()));
    VK_ALLOCATE_MEMORY = transmute(dlsym(handle, c"vkAllocateMemory".as_ptr()));
    VK_FREE_MEMORY = transmute(dlsym(handle, c"vkFreeMemory".as_ptr()));
    VK_MAP_MEMORY = transmute(dlsym(handle, c"vkMapMemory".as_ptr()));
    VK_UNMAP_MEMORY = transmute(dlsym(handle, c"vkUnmapMemory".as_ptr()));
    VK_FLUSH_MAPPED_MEMORY_RANGES = transmute(dlsym(handle, c"vkFlushMappedMemoryRanges".as_ptr()));
    VK_INVALIDATE_MAPPED_MEMORY_RANGES = transmute(dlsym(handle, c"vkInvalidateMappedMemoryRanges".as_ptr()));
    VK_GET_DEVICE_MEMORY_COMMITMENT = transmute(dlsym(handle, c"vkGetDeviceMemoryCommitment".as_ptr()));
    VK_BIND_BUFFER_MEMORY = transmute(dlsym(handle, c"vkBindBufferMemory".as_ptr()));
    VK_BIND_IMAGE_MEMORY = transmute(dlsym(handle, c"vkBindImageMemory".as_ptr()));
    VK_GET_BUFFER_MEMORY_REQUIREMENTS = transmute(dlsym(handle, c"vkGetBufferMemoryRequirements".as_ptr()));
    VK_GET_IMAGE_MEMORY_REQUIREMENTS = transmute(dlsym(handle, c"vkGetImageMemoryRequirements".as_ptr()));
    VK_GET_IMAGE_SPARSE_MEMORY_REQUIREMENTS = transmute(dlsym(handle, c"vkGetImageSparseMemoryRequirements".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_PROPERTIES = transmute(dlsym(handle, c"vkGetPhysicalDeviceSparseImageFormatProperties".as_ptr()));
    VK_QUEUE_BIND_SPARSE = transmute(dlsym(handle, c"vkQueueBindSparse".as_ptr()));
    VK_CREATE_FENCE = transmute(dlsym(handle, c"vkCreateFence".as_ptr()));
    VK_DESTROY_FENCE = transmute(dlsym(handle, c"vkDestroyFence".as_ptr()));
    VK_RESET_FENCES = transmute(dlsym(handle, c"vkResetFences".as_ptr()));
    VK_GET_FENCE_STATUS = transmute(dlsym(handle, c"vkGetFenceStatus".as_ptr()));
    VK_WAIT_FOR_FENCES = transmute(dlsym(handle, c"vkWaitForFences".as_ptr()));
    VK_CREATE_SEMAPHORE = transmute(dlsym(handle, c"vkCreateSemaphore".as_ptr()));
    VK_DESTROY_SEMAPHORE = transmute(dlsym(handle, c"vkDestroySemaphore".as_ptr()));
    VK_CREATE_EVENT = transmute(dlsym(handle, c"vkCreateEvent".as_ptr()));
    VK_DESTROY_EVENT = transmute(dlsym(handle, c"vkDestroyEvent".as_ptr()));
    VK_GET_EVENT_STATUS = transmute(dlsym(handle, c"vkGetEventStatus".as_ptr()));
    VK_SET_EVENT = transmute(dlsym(handle, c"vkSetEvent".as_ptr()));
    VK_RESET_EVENT = transmute(dlsym(handle, c"vkResetEvent".as_ptr()));
    VK_CREATE_QUERY_POOL = transmute(dlsym(handle, c"vkCreateQueryPool".as_ptr()));
    VK_DESTROY_QUERY_POOL = transmute(dlsym(handle, c"vkDestroyQueryPool".as_ptr()));
    VK_GET_QUERY_POOL_RESULTS = transmute(dlsym(handle, c"vkGetQueryPoolResults".as_ptr()));
    VK_CREATE_BUFFER = transmute(dlsym(handle, c"vkCreateBuffer".as_ptr()));
    VK_DESTROY_BUFFER = transmute(dlsym(handle, c"vkDestroyBuffer".as_ptr()));
    VK_CREATE_BUFFER_VIEW = transmute(dlsym(handle, c"vkCreateBufferView".as_ptr()));
    VK_DESTROY_BUFFER_VIEW = transmute(dlsym(handle, c"vkDestroyBufferView".as_ptr()));
    VK_CREATE_IMAGE = transmute(dlsym(handle, c"vkCreateImage".as_ptr()));
    VK_DESTROY_IMAGE = transmute(dlsym(handle, c"vkDestroyImage".as_ptr()));
    VK_GET_IMAGE_SUBRESOURCE_LAYOUT = transmute(dlsym(handle, c"vkGetImageSubresourceLayout".as_ptr()));
    VK_CREATE_IMAGE_VIEW = transmute(dlsym(handle, c"vkCreateImageView".as_ptr()));
    VK_DESTROY_IMAGE_VIEW = transmute(dlsym(handle, c"vkDestroyImageView".as_ptr()));
    VK_CREATE_SHADER_MODULE = transmute(dlsym(handle, c"vkCreateShaderModule".as_ptr()));
    VK_DESTROY_SHADER_MODULE = transmute(dlsym(handle, c"vkDestroyShaderModule".as_ptr()));
    VK_CREATE_PIPELINE_CACHE = transmute(dlsym(handle, c"vkCreatePipelineCache".as_ptr()));
    VK_DESTROY_PIPELINE_CACHE = transmute(dlsym(handle, c"vkDestroyPipelineCache".as_ptr()));
    VK_GET_PIPELINE_CACHE_DATA = transmute(dlsym(handle, c"vkGetPipelineCacheData".as_ptr()));
    VK_MERGE_PIPELINE_CACHES = transmute(dlsym(handle, c"vkMergePipelineCaches".as_ptr()));
    VK_CREATE_GRAPHICS_PIPELINES = transmute(dlsym(handle, c"vkCreateGraphicsPipelines".as_ptr()));
    VK_CREATE_COMPUTE_PIPELINES = transmute(dlsym(handle, c"vkCreateComputePipelines".as_ptr()));
    VK_DESTROY_PIPELINE = transmute(dlsym(handle, c"vkDestroyPipeline".as_ptr()));
    VK_CREATE_PIPELINE_LAYOUT = transmute(dlsym(handle, c"vkCreatePipelineLayout".as_ptr()));
    VK_DESTROY_PIPELINE_LAYOUT = transmute(dlsym(handle, c"vkDestroyPipelineLayout".as_ptr()));
    VK_CREATE_SAMPLER = transmute(dlsym(handle, c"vkCreateSampler".as_ptr()));
    VK_DESTROY_SAMPLER = transmute(dlsym(handle, c"vkDestroySampler".as_ptr()));
    VK_CREATE_DESCRIPTOR_SET_LAYOUT = transmute(dlsym(handle, c"vkCreateDescriptorSetLayout".as_ptr()));
    VK_DESTROY_DESCRIPTOR_SET_LAYOUT = transmute(dlsym(handle, c"vkDestroyDescriptorSetLayout".as_ptr()));
    VK_CREATE_DESCRIPTOR_POOL = transmute(dlsym(handle, c"vkCreateDescriptorPool".as_ptr()));
    VK_DESTROY_DESCRIPTOR_POOL = transmute(dlsym(handle, c"vkDestroyDescriptorPool".as_ptr()));
    VK_RESET_DESCRIPTOR_POOL = transmute(dlsym(handle, c"vkResetDescriptorPool".as_ptr()));
    VK_ALLOCATE_DESCRIPTOR_SETS = transmute(dlsym(handle, c"vkAllocateDescriptorSets".as_ptr()));
    VK_FREE_DESCRIPTOR_SETS = transmute(dlsym(handle, c"vkFreeDescriptorSets".as_ptr()));
    VK_UPDATE_DESCRIPTOR_SETS = transmute(dlsym(handle, c"vkUpdateDescriptorSets".as_ptr()));
    VK_CREATE_FRAMEBUFFER = transmute(dlsym(handle, c"vkCreateFramebuffer".as_ptr()));
    VK_DESTROY_FRAMEBUFFER = transmute(dlsym(handle, c"vkDestroyFramebuffer".as_ptr()));
    VK_CREATE_RENDER_PASS = transmute(dlsym(handle, c"vkCreateRenderPass".as_ptr()));
    VK_DESTROY_RENDER_PASS = transmute(dlsym(handle, c"vkDestroyRenderPass".as_ptr()));
    VK_GET_RENDER_AREA_GRANULARITY = transmute(dlsym(handle, c"vkGetRenderAreaGranularity".as_ptr()));
    VK_CREATE_COMMAND_POOL = transmute(dlsym(handle, c"vkCreateCommandPool".as_ptr()));
    VK_DESTROY_COMMAND_POOL = transmute(dlsym(handle, c"vkDestroyCommandPool".as_ptr()));
    VK_RESET_COMMAND_POOL = transmute(dlsym(handle, c"vkResetCommandPool".as_ptr()));
    VK_ALLOCATE_COMMAND_BUFFERS = transmute(dlsym(handle, c"vkAllocateCommandBuffers".as_ptr()));
    VK_FREE_COMMAND_BUFFERS = transmute(dlsym(handle, c"vkFreeCommandBuffers".as_ptr()));
    VK_BEGIN_COMMAND_BUFFER = transmute(dlsym(handle, c"vkBeginCommandBuffer".as_ptr()));
    VK_END_COMMAND_BUFFER = transmute(dlsym(handle, c"vkEndCommandBuffer".as_ptr()));
    VK_RESET_COMMAND_BUFFER = transmute(dlsym(handle, c"vkResetCommandBuffer".as_ptr()));
    VK_CMD_BIND_PIPELINE = transmute(dlsym(handle, c"vkCmdBindPipeline".as_ptr()));
    VK_CMD_SET_VIEWPORT = transmute(dlsym(handle, c"vkCmdSetViewport".as_ptr()));
    VK_CMD_SET_SCISSOR = transmute(dlsym(handle, c"vkCmdSetScissor".as_ptr()));
    VK_CMD_SET_LINE_WIDTH = transmute(dlsym(handle, c"vkCmdSetLineWidth".as_ptr()));
    VK_CMD_SET_DEPTH_BIAS = transmute(dlsym(handle, c"vkCmdSetDepthBias".as_ptr()));
    VK_CMD_SET_BLEND_CONSTANTS = transmute(dlsym(handle, c"vkCmdSetBlendConstants".as_ptr()));
    VK_CMD_SET_DEPTH_BOUNDS = transmute(dlsym(handle, c"vkCmdSetDepthBounds".as_ptr()));
    VK_CMD_SET_STENCIL_COMPARE_MASK = transmute(dlsym(handle, c"vkCmdSetStencilCompareMask".as_ptr()));
    VK_CMD_SET_STENCIL_WRITE_MASK = transmute(dlsym(handle, c"vkCmdSetStencilWriteMask".as_ptr()));
    VK_CMD_SET_STENCIL_REFERENCE = transmute(dlsym(handle, c"vkCmdSetStencilReference".as_ptr()));
    VK_CMD_BIND_DESCRIPTOR_SETS = transmute(dlsym(handle, c"vkCmdBindDescriptorSets".as_ptr()));
    VK_CMD_BIND_INDEX_BUFFER = transmute(dlsym(handle, c"vkCmdBindIndexBuffer".as_ptr()));
    VK_CMD_BIND_VERTEX_BUFFERS = transmute(dlsym(handle, c"vkCmdBindVertexBuffers".as_ptr()));
    VK_CMD_DRAW = transmute(dlsym(handle, c"vkCmdDraw".as_ptr()));
    VK_CMD_DRAW_INDEXED = transmute(dlsym(handle, c"vkCmdDrawIndexed".as_ptr()));
    VK_CMD_DRAW_INDIRECT = transmute(dlsym(handle, c"vkCmdDrawIndirect".as_ptr()));
    VK_CMD_DRAW_INDEXED_INDIRECT = transmute(dlsym(handle, c"vkCmdDrawIndexedIndirect".as_ptr()));
    VK_CMD_DISPATCH = transmute(dlsym(handle, c"vkCmdDispatch".as_ptr()));
    VK_CMD_DISPATCH_INDIRECT = transmute(dlsym(handle, c"vkCmdDispatchIndirect".as_ptr()));
    VK_CMD_COPY_BUFFER = transmute(dlsym(handle, c"vkCmdCopyBuffer".as_ptr()));
    VK_CMD_COPY_IMAGE = transmute(dlsym(handle, c"vkCmdCopyImage".as_ptr()));
    VK_CMD_BLIT_IMAGE = transmute(dlsym(handle, c"vkCmdBlitImage".as_ptr()));
    VK_CMD_COPY_BUFFER_TO_IMAGE = transmute(dlsym(handle, c"vkCmdCopyBufferToImage".as_ptr()));
    VK_CMD_COPY_IMAGE_TO_BUFFER = transmute(dlsym(handle, c"vkCmdCopyImageToBuffer".as_ptr()));
    VK_CMD_UPDATE_BUFFER = transmute(dlsym(handle, c"vkCmdUpdateBuffer".as_ptr()));
    VK_CMD_FILL_BUFFER = transmute(dlsym(handle, c"vkCmdFillBuffer".as_ptr()));
    VK_CMD_CLEAR_COLOR_IMAGE = transmute(dlsym(handle, c"vkCmdClearColorImage".as_ptr()));
    VK_CMD_CLEAR_DEPTH_STENCIL_IMAGE = transmute(dlsym(handle, c"vkCmdClearDepthStencilImage".as_ptr()));
    VK_CMD_CLEAR_ATTACHMENTS = transmute(dlsym(handle, c"vkCmdClearAttachments".as_ptr()));
    VK_CMD_RESOLVE_IMAGE = transmute(dlsym(handle, c"vkCmdResolveImage".as_ptr()));
    VK_CMD_SET_EVENT = transmute(dlsym(handle, c"vkCmdSetEvent".as_ptr()));
    VK_CMD_RESET_EVENT = transmute(dlsym(handle, c"vkCmdResetEvent".as_ptr()));
    VK_CMD_WAIT_EVENTS = transmute(dlsym(handle, c"vkCmdWaitEvents".as_ptr()));
    VK_CMD_PIPELINE_BARRIER = transmute(dlsym(handle, c"vkCmdPipelineBarrier".as_ptr()));
    VK_CMD_BEGIN_QUERY = transmute(dlsym(handle, c"vkCmdBeginQuery".as_ptr()));
    VK_CMD_END_QUERY = transmute(dlsym(handle, c"vkCmdEndQuery".as_ptr()));
    VK_CMD_RESET_QUERY_POOL = transmute(dlsym(handle, c"vkCmdResetQueryPool".as_ptr()));
    VK_CMD_WRITE_TIMESTAMP = transmute(dlsym(handle, c"vkCmdWriteTimestamp".as_ptr()));
    VK_CMD_COPY_QUERY_POOL_RESULTS = transmute(dlsym(handle, c"vkCmdCopyQueryPoolResults".as_ptr()));
    VK_CMD_PUSH_CONSTANTS = transmute(dlsym(handle, c"vkCmdPushConstants".as_ptr()));
    VK_CMD_BEGIN_RENDER_PASS = transmute(dlsym(handle, c"vkCmdBeginRenderPass".as_ptr()));
    VK_CMD_NEXT_SUBPASS = transmute(dlsym(handle, c"vkCmdNextSubpass".as_ptr()));
    VK_CMD_END_RENDER_PASS = transmute(dlsym(handle, c"vkCmdEndRenderPass".as_ptr()));
    VK_CMD_EXECUTE_COMMANDS = transmute(dlsym(handle, c"vkCmdExecuteCommands".as_ptr()));
    VK_ENUMERATE_INSTANCE_VERSION = transmute(dlsym(handle, c"vkEnumerateInstanceVersion".as_ptr()));
    VK_BIND_BUFFER_MEMORY2 = transmute(dlsym(handle, c"vkBindBufferMemory2".as_ptr()));
    VK_BIND_IMAGE_MEMORY2 = transmute(dlsym(handle, c"vkBindImageMemory2".as_ptr()));
    VK_GET_DEVICE_GROUP_PEER_MEMORY_FEATURES = transmute(dlsym(handle, c"vkGetDeviceGroupPeerMemoryFeatures".as_ptr()));
    VK_CMD_SET_DEVICE_MASK = transmute(dlsym(handle, c"vkCmdSetDeviceMask".as_ptr()));
    VK_CMD_DISPATCH_BASE = transmute(dlsym(handle, c"vkCmdDispatchBase".as_ptr()));
    VK_ENUMERATE_PHYSICAL_DEVICE_GROUPS = transmute(dlsym(handle, c"vkEnumeratePhysicalDeviceGroups".as_ptr()));
    VK_GET_IMAGE_MEMORY_REQUIREMENTS2 = transmute(dlsym(handle, c"vkGetImageMemoryRequirements2".as_ptr()));
    VK_GET_BUFFER_MEMORY_REQUIREMENTS2 = transmute(dlsym(handle, c"vkGetBufferMemoryRequirements2".as_ptr()));
    VK_GET_IMAGE_SPARSE_MEMORY_REQUIREMENTS2 = transmute(dlsym(handle, c"vkGetImageSparseMemoryRequirements2".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_FEATURES2 = transmute(dlsym(handle, c"vkGetPhysicalDeviceFeatures2".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_PROPERTIES2 = transmute(dlsym(handle, c"vkGetPhysicalDeviceProperties2".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_FORMAT_PROPERTIES2 = transmute(dlsym(handle, c"vkGetPhysicalDeviceFormatProperties2".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_IMAGE_FORMAT_PROPERTIES2 = transmute(dlsym(handle, c"vkGetPhysicalDeviceImageFormatProperties2".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_QUEUE_FAMILY_PROPERTIES2 = transmute(dlsym(handle, c"vkGetPhysicalDeviceQueueFamilyProperties2".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_MEMORY_PROPERTIES2 = transmute(dlsym(handle, c"vkGetPhysicalDeviceMemoryProperties2".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_PROPERTIES2 = transmute(dlsym(handle, c"vkGetPhysicalDeviceSparseImageFormatProperties2".as_ptr()));
    VK_TRIM_COMMAND_POOL = transmute(dlsym(handle, c"vkTrimCommandPool".as_ptr()));
    VK_GET_DEVICE_QUEUE2 = transmute(dlsym(handle, c"vkGetDeviceQueue2".as_ptr()));
    VK_CREATE_SAMPLER_YCBCR_CONVERSION = transmute(dlsym(handle, c"vkCreateSamplerYcbcrConversion".as_ptr()));
    VK_DESTROY_SAMPLER_YCBCR_CONVERSION = transmute(dlsym(handle, c"vkDestroySamplerYcbcrConversion".as_ptr()));
    VK_CREATE_DESCRIPTOR_UPDATE_TEMPLATE = transmute(dlsym(handle, c"vkCreateDescriptorUpdateTemplate".as_ptr()));
    VK_DESTROY_DESCRIPTOR_UPDATE_TEMPLATE = transmute(dlsym(handle, c"vkDestroyDescriptorUpdateTemplate".as_ptr()));
    VK_UPDATE_DESCRIPTOR_SET_WITH_TEMPLATE = transmute(dlsym(handle, c"vkUpdateDescriptorSetWithTemplate".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_EXTERNAL_BUFFER_PROPERTIES = transmute(dlsym(handle, c"vkGetPhysicalDeviceExternalBufferProperties".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_EXTERNAL_FENCE_PROPERTIES = transmute(dlsym(handle, c"vkGetPhysicalDeviceExternalFenceProperties".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_PROPERTIES = transmute(dlsym(handle, c"vkGetPhysicalDeviceExternalSemaphoreProperties".as_ptr()));
    VK_GET_DESCRIPTOR_SET_LAYOUT_SUPPORT = transmute(dlsym(handle, c"vkGetDescriptorSetLayoutSupport".as_ptr()));
    VK_CMD_DRAW_INDIRECT_COUNT = transmute(dlsym(handle, c"vkCmdDrawIndirectCount".as_ptr()));
    VK_CMD_DRAW_INDEXED_INDIRECT_COUNT = transmute(dlsym(handle, c"vkCmdDrawIndexedIndirectCount".as_ptr()));
    VK_CREATE_RENDER_PASS2 = transmute(dlsym(handle, c"vkCreateRenderPass2".as_ptr()));
    VK_CMD_BEGIN_RENDER_PASS2 = transmute(dlsym(handle, c"vkCmdBeginRenderPass2".as_ptr()));
    VK_CMD_NEXT_SUBPASS2 = transmute(dlsym(handle, c"vkCmdNextSubpass2".as_ptr()));
    VK_CMD_END_RENDER_PASS2 = transmute(dlsym(handle, c"vkCmdEndRenderPass2".as_ptr()));
    VK_RESET_QUERY_POOL = transmute(dlsym(handle, c"vkResetQueryPool".as_ptr()));
    VK_GET_SEMAPHORE_COUNTER_VALUE = transmute(dlsym(handle, c"vkGetSemaphoreCounterValue".as_ptr()));
    VK_WAIT_SEMAPHORES = transmute(dlsym(handle, c"vkWaitSemaphores".as_ptr()));
    VK_SIGNAL_SEMAPHORE = transmute(dlsym(handle, c"vkSignalSemaphore".as_ptr()));
    VK_GET_BUFFER_DEVICE_ADDRESS = transmute(dlsym(handle, c"vkGetBufferDeviceAddress".as_ptr()));
    VK_GET_BUFFER_OPAQUE_CAPTURE_ADDRESS = transmute(dlsym(handle, c"vkGetBufferOpaqueCaptureAddress".as_ptr()));
    VK_GET_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS = transmute(dlsym(handle, c"vkGetDeviceMemoryOpaqueCaptureAddress".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_TOOL_PROPERTIES = transmute(dlsym(handle, c"vkGetPhysicalDeviceToolProperties".as_ptr()));
    VK_CREATE_PRIVATE_DATA_SLOT = transmute(dlsym(handle, c"vkCreatePrivateDataSlot".as_ptr()));
    VK_DESTROY_PRIVATE_DATA_SLOT = transmute(dlsym(handle, c"vkDestroyPrivateDataSlot".as_ptr()));
    VK_SET_PRIVATE_DATA = transmute(dlsym(handle, c"vkSetPrivateData".as_ptr()));
    VK_GET_PRIVATE_DATA = transmute(dlsym(handle, c"vkGetPrivateData".as_ptr()));
    VK_CMD_SET_EVENT2 = transmute(dlsym(handle, c"vkCmdSetEvent2".as_ptr()));
    VK_CMD_RESET_EVENT2 = transmute(dlsym(handle, c"vkCmdResetEvent2".as_ptr()));
    VK_CMD_WAIT_EVENTS2 = transmute(dlsym(handle, c"vkCmdWaitEvents2".as_ptr()));
    VK_CMD_PIPELINE_BARRIER2 = transmute(dlsym(handle, c"vkCmdPipelineBarrier2".as_ptr()));
    VK_CMD_WRITE_TIMESTAMP2 = transmute(dlsym(handle, c"vkCmdWriteTimestamp2".as_ptr()));
    VK_QUEUE_SUBMIT2 = transmute(dlsym(handle, c"vkQueueSubmit2".as_ptr()));
    VK_CMD_COPY_BUFFER2 = transmute(dlsym(handle, c"vkCmdCopyBuffer2".as_ptr()));
    VK_CMD_COPY_IMAGE2 = transmute(dlsym(handle, c"vkCmdCopyImage2".as_ptr()));
    VK_CMD_COPY_BUFFER_TO_IMAGE2 = transmute(dlsym(handle, c"vkCmdCopyBufferToImage2".as_ptr()));
    VK_CMD_COPY_IMAGE_TO_BUFFER2 = transmute(dlsym(handle, c"vkCmdCopyImageToBuffer2".as_ptr()));
    VK_CMD_BLIT_IMAGE2 = transmute(dlsym(handle, c"vkCmdBlitImage2".as_ptr()));
    VK_CMD_RESOLVE_IMAGE2 = transmute(dlsym(handle, c"vkCmdResolveImage2".as_ptr()));
    VK_CMD_BEGIN_RENDERING = transmute(dlsym(handle, c"vkCmdBeginRendering".as_ptr()));
    VK_CMD_END_RENDERING = transmute(dlsym(handle, c"vkCmdEndRendering".as_ptr()));
    VK_CMD_SET_CULL_MODE = transmute(dlsym(handle, c"vkCmdSetCullMode".as_ptr()));
    VK_CMD_SET_FRONT_FACE = transmute(dlsym(handle, c"vkCmdSetFrontFace".as_ptr()));
    VK_CMD_SET_PRIMITIVE_TOPOLOGY = transmute(dlsym(handle, c"vkCmdSetPrimitiveTopology".as_ptr()));
    VK_CMD_SET_VIEWPORT_WITH_COUNT = transmute(dlsym(handle, c"vkCmdSetViewportWithCount".as_ptr()));
    VK_CMD_SET_SCISSOR_WITH_COUNT = transmute(dlsym(handle, c"vkCmdSetScissorWithCount".as_ptr()));
    VK_CMD_BIND_VERTEX_BUFFERS2 = transmute(dlsym(handle, c"vkCmdBindVertexBuffers2".as_ptr()));
    VK_CMD_SET_DEPTH_TEST_ENABLE = transmute(dlsym(handle, c"vkCmdSetDepthTestEnable".as_ptr()));
    VK_CMD_SET_DEPTH_WRITE_ENABLE = transmute(dlsym(handle, c"vkCmdSetDepthWriteEnable".as_ptr()));
    VK_CMD_SET_DEPTH_COMPARE_OP = transmute(dlsym(handle, c"vkCmdSetDepthCompareOp".as_ptr()));
    VK_CMD_SET_DEPTH_BOUNDS_TEST_ENABLE = transmute(dlsym(handle, c"vkCmdSetDepthBoundsTestEnable".as_ptr()));
    VK_CMD_SET_STENCIL_TEST_ENABLE = transmute(dlsym(handle, c"vkCmdSetStencilTestEnable".as_ptr()));
    VK_CMD_SET_STENCIL_OP = transmute(dlsym(handle, c"vkCmdSetStencilOp".as_ptr()));
    VK_CMD_SET_RASTERIZER_DISCARD_ENABLE = transmute(dlsym(handle, c"vkCmdSetRasterizerDiscardEnable".as_ptr()));
    VK_CMD_SET_DEPTH_BIAS_ENABLE = transmute(dlsym(handle, c"vkCmdSetDepthBiasEnable".as_ptr()));
    VK_CMD_SET_PRIMITIVE_RESTART_ENABLE = transmute(dlsym(handle, c"vkCmdSetPrimitiveRestartEnable".as_ptr()));
    VK_GET_DEVICE_BUFFER_MEMORY_REQUIREMENTS = transmute(dlsym(handle, c"vkGetDeviceBufferMemoryRequirements".as_ptr()));
    VK_GET_DEVICE_IMAGE_MEMORY_REQUIREMENTS = transmute(dlsym(handle, c"vkGetDeviceImageMemoryRequirements".as_ptr()));
    VK_GET_DEVICE_IMAGE_SPARSE_MEMORY_REQUIREMENTS = transmute(dlsym(handle, c"vkGetDeviceImageSparseMemoryRequirements".as_ptr()));
    VK_CMD_SET_LINE_STIPPLE = transmute(dlsym(handle, c"vkCmdSetLineStipple".as_ptr()));
    VK_MAP_MEMORY2 = transmute(dlsym(handle, c"vkMapMemory2".as_ptr()));
    VK_UNMAP_MEMORY2 = transmute(dlsym(handle, c"vkUnmapMemory2".as_ptr()));
    VK_CMD_BIND_INDEX_BUFFER2 = transmute(dlsym(handle, c"vkCmdBindIndexBuffer2".as_ptr()));
    VK_GET_RENDERING_AREA_GRANULARITY = transmute(dlsym(handle, c"vkGetRenderingAreaGranularity".as_ptr()));
    VK_GET_DEVICE_IMAGE_SUBRESOURCE_LAYOUT = transmute(dlsym(handle, c"vkGetDeviceImageSubresourceLayout".as_ptr()));
    VK_GET_IMAGE_SUBRESOURCE_LAYOUT2 = transmute(dlsym(handle, c"vkGetImageSubresourceLayout2".as_ptr()));
    VK_CMD_PUSH_DESCRIPTOR_SET = transmute(dlsym(handle, c"vkCmdPushDescriptorSet".as_ptr()));
    VK_CMD_PUSH_DESCRIPTOR_SET_WITH_TEMPLATE = transmute(dlsym(handle, c"vkCmdPushDescriptorSetWithTemplate".as_ptr()));
    VK_CMD_SET_RENDERING_ATTACHMENT_LOCATIONS = transmute(dlsym(handle, c"vkCmdSetRenderingAttachmentLocations".as_ptr()));
    VK_CMD_SET_RENDERING_INPUT_ATTACHMENT_INDICES = transmute(dlsym(handle, c"vkCmdSetRenderingInputAttachmentIndices".as_ptr()));
    VK_CMD_BIND_DESCRIPTOR_SETS2 = transmute(dlsym(handle, c"vkCmdBindDescriptorSets2".as_ptr()));
    VK_CMD_PUSH_CONSTANTS2 = transmute(dlsym(handle, c"vkCmdPushConstants2".as_ptr()));
    VK_CMD_PUSH_DESCRIPTOR_SET2 = transmute(dlsym(handle, c"vkCmdPushDescriptorSet2".as_ptr()));
    VK_CMD_PUSH_DESCRIPTOR_SET_WITH_TEMPLATE2 = transmute(dlsym(handle, c"vkCmdPushDescriptorSetWithTemplate2".as_ptr()));
    VK_COPY_MEMORY_TO_IMAGE = transmute(dlsym(handle, c"vkCopyMemoryToImage".as_ptr()));
    VK_COPY_IMAGE_TO_MEMORY = transmute(dlsym(handle, c"vkCopyImageToMemory".as_ptr()));
    VK_COPY_IMAGE_TO_IMAGE = transmute(dlsym(handle, c"vkCopyImageToImage".as_ptr()));
    VK_TRANSITION_IMAGE_LAYOUT = transmute(dlsym(handle, c"vkTransitionImageLayout".as_ptr()));
    VK_DESTROY_SURFACE_KHR = transmute(dlsym(handle, c"vkDestroySurfaceKHR".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_SURFACE_SUPPORT_KHR = transmute(dlsym(handle, c"vkGetPhysicalDeviceSurfaceSupportKHR".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_SURFACE_CAPABILITIES_KHR = transmute(dlsym(handle, c"vkGetPhysicalDeviceSurfaceCapabilitiesKHR".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_SURFACE_FORMATS_KHR = transmute(dlsym(handle, c"vkGetPhysicalDeviceSurfaceFormatsKHR".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_SURFACE_PRESENT_MODES_KHR = transmute(dlsym(handle, c"vkGetPhysicalDeviceSurfacePresentModesKHR".as_ptr()));
    VK_CREATE_SWAPCHAIN_KHR = transmute(dlsym(handle, c"vkCreateSwapchainKHR".as_ptr()));
    VK_DESTROY_SWAPCHAIN_KHR = transmute(dlsym(handle, c"vkDestroySwapchainKHR".as_ptr()));
    VK_GET_SWAPCHAIN_IMAGES_KHR = transmute(dlsym(handle, c"vkGetSwapchainImagesKHR".as_ptr()));
    VK_ACQUIRE_NEXT_IMAGE_KHR = transmute(dlsym(handle, c"vkAcquireNextImageKHR".as_ptr()));
    VK_QUEUE_PRESENT_KHR = transmute(dlsym(handle, c"vkQueuePresentKHR".as_ptr()));
    VK_GET_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR = transmute(dlsym(handle, c"vkGetDeviceGroupPresentCapabilitiesKHR".as_ptr()));
    VK_GET_DEVICE_GROUP_SURFACE_PRESENT_MODES_KHR = transmute(dlsym(handle, c"vkGetDeviceGroupSurfacePresentModesKHR".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_PRESENT_RECTANGLES_KHR = transmute(dlsym(handle, c"vkGetPhysicalDevicePresentRectanglesKHR".as_ptr()));
    VK_ACQUIRE_NEXT_IMAGE2_KHR = transmute(dlsym(handle, c"vkAcquireNextImage2KHR".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_DISPLAY_PROPERTIES_KHR = transmute(dlsym(handle, c"vkGetPhysicalDeviceDisplayPropertiesKHR".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_DISPLAY_PLANE_PROPERTIES_KHR = transmute(dlsym(handle, c"vkGetPhysicalDeviceDisplayPlanePropertiesKHR".as_ptr()));
    VK_GET_DISPLAY_PLANE_SUPPORTED_DISPLAYS_KHR = transmute(dlsym(handle, c"vkGetDisplayPlaneSupportedDisplaysKHR".as_ptr()));
    VK_GET_DISPLAY_MODE_PROPERTIES_KHR = transmute(dlsym(handle, c"vkGetDisplayModePropertiesKHR".as_ptr()));
    VK_CREATE_DISPLAY_MODE_KHR = transmute(dlsym(handle, c"vkCreateDisplayModeKHR".as_ptr()));
    VK_GET_DISPLAY_PLANE_CAPABILITIES_KHR = transmute(dlsym(handle, c"vkGetDisplayPlaneCapabilitiesKHR".as_ptr()));
    VK_CREATE_DISPLAY_PLANE_SURFACE_KHR = transmute(dlsym(handle, c"vkCreateDisplayPlaneSurfaceKHR".as_ptr()));
    VK_CREATE_SHARED_SWAPCHAINS_KHR = transmute(dlsym(handle, c"vkCreateSharedSwapchainsKHR".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_VIDEO_CAPABILITIES_KHR = transmute(dlsym(handle, c"vkGetPhysicalDeviceVideoCapabilitiesKHR".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_VIDEO_FORMAT_PROPERTIES_KHR = transmute(dlsym(handle, c"vkGetPhysicalDeviceVideoFormatPropertiesKHR".as_ptr()));
    VK_CREATE_VIDEO_SESSION_KHR = transmute(dlsym(handle, c"vkCreateVideoSessionKHR".as_ptr()));
    VK_DESTROY_VIDEO_SESSION_KHR = transmute(dlsym(handle, c"vkDestroyVideoSessionKHR".as_ptr()));
    VK_GET_VIDEO_SESSION_MEMORY_REQUIREMENTS_KHR = transmute(dlsym(handle, c"vkGetVideoSessionMemoryRequirementsKHR".as_ptr()));
    VK_BIND_VIDEO_SESSION_MEMORY_KHR = transmute(dlsym(handle, c"vkBindVideoSessionMemoryKHR".as_ptr()));
    VK_CREATE_VIDEO_SESSION_PARAMETERS_KHR = transmute(dlsym(handle, c"vkCreateVideoSessionParametersKHR".as_ptr()));
    VK_UPDATE_VIDEO_SESSION_PARAMETERS_KHR = transmute(dlsym(handle, c"vkUpdateVideoSessionParametersKHR".as_ptr()));
    VK_DESTROY_VIDEO_SESSION_PARAMETERS_KHR = transmute(dlsym(handle, c"vkDestroyVideoSessionParametersKHR".as_ptr()));
    VK_CMD_BEGIN_VIDEO_CODING_KHR = transmute(dlsym(handle, c"vkCmdBeginVideoCodingKHR".as_ptr()));
    VK_CMD_END_VIDEO_CODING_KHR = transmute(dlsym(handle, c"vkCmdEndVideoCodingKHR".as_ptr()));
    VK_CMD_CONTROL_VIDEO_CODING_KHR = transmute(dlsym(handle, c"vkCmdControlVideoCodingKHR".as_ptr()));
    VK_CMD_DECODE_VIDEO_KHR = transmute(dlsym(handle, c"vkCmdDecodeVideoKHR".as_ptr()));
    VK_CMD_BEGIN_RENDERING_KHR = transmute(dlsym(handle, c"vkCmdBeginRenderingKHR".as_ptr()));
    VK_CMD_END_RENDERING_KHR = transmute(dlsym(handle, c"vkCmdEndRenderingKHR".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_FEATURES2_KHR = transmute(dlsym(handle, c"vkGetPhysicalDeviceFeatures2KHR".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_PROPERTIES2_KHR = transmute(dlsym(handle, c"vkGetPhysicalDeviceProperties2KHR".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_FORMAT_PROPERTIES2_KHR = transmute(dlsym(handle, c"vkGetPhysicalDeviceFormatProperties2KHR".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_IMAGE_FORMAT_PROPERTIES2_KHR = transmute(dlsym(handle, c"vkGetPhysicalDeviceImageFormatProperties2KHR".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_QUEUE_FAMILY_PROPERTIES2_KHR = transmute(dlsym(handle, c"vkGetPhysicalDeviceQueueFamilyProperties2KHR".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_MEMORY_PROPERTIES2_KHR = transmute(dlsym(handle, c"vkGetPhysicalDeviceMemoryProperties2KHR".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_PROPERTIES2_KHR = transmute(dlsym(handle, c"vkGetPhysicalDeviceSparseImageFormatProperties2KHR".as_ptr()));
    VK_GET_DEVICE_GROUP_PEER_MEMORY_FEATURES_KHR = transmute(dlsym(handle, c"vkGetDeviceGroupPeerMemoryFeaturesKHR".as_ptr()));
    VK_CMD_SET_DEVICE_MASK_KHR = transmute(dlsym(handle, c"vkCmdSetDeviceMaskKHR".as_ptr()));
    VK_CMD_DISPATCH_BASE_KHR = transmute(dlsym(handle, c"vkCmdDispatchBaseKHR".as_ptr()));
    VK_TRIM_COMMAND_POOL_KHR = transmute(dlsym(handle, c"vkTrimCommandPoolKHR".as_ptr()));
    VK_ENUMERATE_PHYSICAL_DEVICE_GROUPS_KHR = transmute(dlsym(handle, c"vkEnumeratePhysicalDeviceGroupsKHR".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_EXTERNAL_BUFFER_PROPERTIES_KHR = transmute(dlsym(handle, c"vkGetPhysicalDeviceExternalBufferPropertiesKHR".as_ptr()));
    VK_GET_MEMORY_FD_KHR = transmute(dlsym(handle, c"vkGetMemoryFdKHR".as_ptr()));
    VK_GET_MEMORY_FD_PROPERTIES_KHR = transmute(dlsym(handle, c"vkGetMemoryFdPropertiesKHR".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR = transmute(dlsym(handle, c"vkGetPhysicalDeviceExternalSemaphorePropertiesKHR".as_ptr()));
    VK_IMPORT_SEMAPHORE_FD_KHR = transmute(dlsym(handle, c"vkImportSemaphoreFdKHR".as_ptr()));
    VK_GET_SEMAPHORE_FD_KHR = transmute(dlsym(handle, c"vkGetSemaphoreFdKHR".as_ptr()));
    VK_CMD_PUSH_DESCRIPTOR_SET_KHR = transmute(dlsym(handle, c"vkCmdPushDescriptorSetKHR".as_ptr()));
    VK_CMD_PUSH_DESCRIPTOR_SET_WITH_TEMPLATE_KHR = transmute(dlsym(handle, c"vkCmdPushDescriptorSetWithTemplateKHR".as_ptr()));
    VK_CREATE_DESCRIPTOR_UPDATE_TEMPLATE_KHR = transmute(dlsym(handle, c"vkCreateDescriptorUpdateTemplateKHR".as_ptr()));
    VK_DESTROY_DESCRIPTOR_UPDATE_TEMPLATE_KHR = transmute(dlsym(handle, c"vkDestroyDescriptorUpdateTemplateKHR".as_ptr()));
    VK_UPDATE_DESCRIPTOR_SET_WITH_TEMPLATE_KHR = transmute(dlsym(handle, c"vkUpdateDescriptorSetWithTemplateKHR".as_ptr()));
    VK_CREATE_RENDER_PASS2_KHR = transmute(dlsym(handle, c"vkCreateRenderPass2KHR".as_ptr()));
    VK_CMD_BEGIN_RENDER_PASS2_KHR = transmute(dlsym(handle, c"vkCmdBeginRenderPass2KHR".as_ptr()));
    VK_CMD_NEXT_SUBPASS2_KHR = transmute(dlsym(handle, c"vkCmdNextSubpass2KHR".as_ptr()));
    VK_CMD_END_RENDER_PASS2_KHR = transmute(dlsym(handle, c"vkCmdEndRenderPass2KHR".as_ptr()));
    VK_GET_SWAPCHAIN_STATUS_KHR = transmute(dlsym(handle, c"vkGetSwapchainStatusKHR".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_EXTERNAL_FENCE_PROPERTIES_KHR = transmute(dlsym(handle, c"vkGetPhysicalDeviceExternalFencePropertiesKHR".as_ptr()));
    VK_IMPORT_FENCE_FD_KHR = transmute(dlsym(handle, c"vkImportFenceFdKHR".as_ptr()));
    VK_GET_FENCE_FD_KHR = transmute(dlsym(handle, c"vkGetFenceFdKHR".as_ptr()));
    VK_ENUMERATE_PHYSICAL_DEVICE_QUEUE_FAMILY_PERFORMANCE_QUERY_COUNTERS_KHR = transmute(dlsym(handle, c"vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_QUEUE_FAMILY_PERFORMANCE_QUERY_PASSES_KHR = transmute(dlsym(handle, c"vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR".as_ptr()));
    VK_ACQUIRE_PROFILING_LOCK_KHR = transmute(dlsym(handle, c"vkAcquireProfilingLockKHR".as_ptr()));
    VK_RELEASE_PROFILING_LOCK_KHR = transmute(dlsym(handle, c"vkReleaseProfilingLockKHR".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_SURFACE_CAPABILITIES2_KHR = transmute(dlsym(handle, c"vkGetPhysicalDeviceSurfaceCapabilities2KHR".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_SURFACE_FORMATS2_KHR = transmute(dlsym(handle, c"vkGetPhysicalDeviceSurfaceFormats2KHR".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_DISPLAY_PROPERTIES2_KHR = transmute(dlsym(handle, c"vkGetPhysicalDeviceDisplayProperties2KHR".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_DISPLAY_PLANE_PROPERTIES2_KHR = transmute(dlsym(handle, c"vkGetPhysicalDeviceDisplayPlaneProperties2KHR".as_ptr()));
    VK_GET_DISPLAY_MODE_PROPERTIES2_KHR = transmute(dlsym(handle, c"vkGetDisplayModeProperties2KHR".as_ptr()));
    VK_GET_DISPLAY_PLANE_CAPABILITIES2_KHR = transmute(dlsym(handle, c"vkGetDisplayPlaneCapabilities2KHR".as_ptr()));
    VK_GET_IMAGE_MEMORY_REQUIREMENTS2_KHR = transmute(dlsym(handle, c"vkGetImageMemoryRequirements2KHR".as_ptr()));
    VK_GET_BUFFER_MEMORY_REQUIREMENTS2_KHR = transmute(dlsym(handle, c"vkGetBufferMemoryRequirements2KHR".as_ptr()));
    VK_GET_IMAGE_SPARSE_MEMORY_REQUIREMENTS2_KHR = transmute(dlsym(handle, c"vkGetImageSparseMemoryRequirements2KHR".as_ptr()));
    VK_CREATE_SAMPLER_YCBCR_CONVERSION_KHR = transmute(dlsym(handle, c"vkCreateSamplerYcbcrConversionKHR".as_ptr()));
    VK_DESTROY_SAMPLER_YCBCR_CONVERSION_KHR = transmute(dlsym(handle, c"vkDestroySamplerYcbcrConversionKHR".as_ptr()));
    VK_BIND_BUFFER_MEMORY2_KHR = transmute(dlsym(handle, c"vkBindBufferMemory2KHR".as_ptr()));
    VK_BIND_IMAGE_MEMORY2_KHR = transmute(dlsym(handle, c"vkBindImageMemory2KHR".as_ptr()));
    VK_GET_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR = transmute(dlsym(handle, c"vkGetDescriptorSetLayoutSupportKHR".as_ptr()));
    VK_CMD_DRAW_INDIRECT_COUNT_KHR = transmute(dlsym(handle, c"vkCmdDrawIndirectCountKHR".as_ptr()));
    VK_CMD_DRAW_INDEXED_INDIRECT_COUNT_KHR = transmute(dlsym(handle, c"vkCmdDrawIndexedIndirectCountKHR".as_ptr()));
    VK_GET_SEMAPHORE_COUNTER_VALUE_KHR = transmute(dlsym(handle, c"vkGetSemaphoreCounterValueKHR".as_ptr()));
    VK_WAIT_SEMAPHORES_KHR = transmute(dlsym(handle, c"vkWaitSemaphoresKHR".as_ptr()));
    VK_SIGNAL_SEMAPHORE_KHR = transmute(dlsym(handle, c"vkSignalSemaphoreKHR".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATES_KHR = transmute(dlsym(handle, c"vkGetPhysicalDeviceFragmentShadingRatesKHR".as_ptr()));
    VK_CMD_SET_FRAGMENT_SHADING_RATE_KHR = transmute(dlsym(handle, c"vkCmdSetFragmentShadingRateKHR".as_ptr()));
    VK_CMD_SET_RENDERING_ATTACHMENT_LOCATIONS_KHR = transmute(dlsym(handle, c"vkCmdSetRenderingAttachmentLocationsKHR".as_ptr()));
    VK_CMD_SET_RENDERING_INPUT_ATTACHMENT_INDICES_KHR = transmute(dlsym(handle, c"vkCmdSetRenderingInputAttachmentIndicesKHR".as_ptr()));
    VK_WAIT_FOR_PRESENT_KHR = transmute(dlsym(handle, c"vkWaitForPresentKHR".as_ptr()));
    VK_GET_BUFFER_DEVICE_ADDRESS_KHR = transmute(dlsym(handle, c"vkGetBufferDeviceAddressKHR".as_ptr()));
    VK_GET_BUFFER_OPAQUE_CAPTURE_ADDRESS_KHR = transmute(dlsym(handle, c"vkGetBufferOpaqueCaptureAddressKHR".as_ptr()));
    VK_GET_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_KHR = transmute(dlsym(handle, c"vkGetDeviceMemoryOpaqueCaptureAddressKHR".as_ptr()));
    VK_CREATE_DEFERRED_OPERATION_KHR = transmute(dlsym(handle, c"vkCreateDeferredOperationKHR".as_ptr()));
    VK_DESTROY_DEFERRED_OPERATION_KHR = transmute(dlsym(handle, c"vkDestroyDeferredOperationKHR".as_ptr()));
    VK_GET_DEFERRED_OPERATION_MAX_CONCURRENCY_KHR = transmute(dlsym(handle, c"vkGetDeferredOperationMaxConcurrencyKHR".as_ptr()));
    VK_GET_DEFERRED_OPERATION_RESULT_KHR = transmute(dlsym(handle, c"vkGetDeferredOperationResultKHR".as_ptr()));
    VK_DEFERRED_OPERATION_JOIN_KHR = transmute(dlsym(handle, c"vkDeferredOperationJoinKHR".as_ptr()));
    VK_GET_PIPELINE_EXECUTABLE_PROPERTIES_KHR = transmute(dlsym(handle, c"vkGetPipelineExecutablePropertiesKHR".as_ptr()));
    VK_GET_PIPELINE_EXECUTABLE_STATISTICS_KHR = transmute(dlsym(handle, c"vkGetPipelineExecutableStatisticsKHR".as_ptr()));
    VK_GET_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATIONS_KHR = transmute(dlsym(handle, c"vkGetPipelineExecutableInternalRepresentationsKHR".as_ptr()));
    VK_MAP_MEMORY2_KHR = transmute(dlsym(handle, c"vkMapMemory2KHR".as_ptr()));
    VK_UNMAP_MEMORY2_KHR = transmute(dlsym(handle, c"vkUnmapMemory2KHR".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_VIDEO_ENCODE_QUALITY_LEVEL_PROPERTIES_KHR = transmute(dlsym(handle, c"vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR".as_ptr()));
    VK_GET_ENCODED_VIDEO_SESSION_PARAMETERS_KHR = transmute(dlsym(handle, c"vkGetEncodedVideoSessionParametersKHR".as_ptr()));
    VK_CMD_ENCODE_VIDEO_KHR = transmute(dlsym(handle, c"vkCmdEncodeVideoKHR".as_ptr()));
    VK_CMD_SET_EVENT2_KHR = transmute(dlsym(handle, c"vkCmdSetEvent2KHR".as_ptr()));
    VK_CMD_RESET_EVENT2_KHR = transmute(dlsym(handle, c"vkCmdResetEvent2KHR".as_ptr()));
    VK_CMD_WAIT_EVENTS2_KHR = transmute(dlsym(handle, c"vkCmdWaitEvents2KHR".as_ptr()));
    VK_CMD_PIPELINE_BARRIER2_KHR = transmute(dlsym(handle, c"vkCmdPipelineBarrier2KHR".as_ptr()));
    VK_CMD_WRITE_TIMESTAMP2_KHR = transmute(dlsym(handle, c"vkCmdWriteTimestamp2KHR".as_ptr()));
    VK_QUEUE_SUBMIT2_KHR = transmute(dlsym(handle, c"vkQueueSubmit2KHR".as_ptr()));
    VK_CMD_COPY_BUFFER2_KHR = transmute(dlsym(handle, c"vkCmdCopyBuffer2KHR".as_ptr()));
    VK_CMD_COPY_IMAGE2_KHR = transmute(dlsym(handle, c"vkCmdCopyImage2KHR".as_ptr()));
    VK_CMD_COPY_BUFFER_TO_IMAGE2_KHR = transmute(dlsym(handle, c"vkCmdCopyBufferToImage2KHR".as_ptr()));
    VK_CMD_COPY_IMAGE_TO_BUFFER2_KHR = transmute(dlsym(handle, c"vkCmdCopyImageToBuffer2KHR".as_ptr()));
    VK_CMD_BLIT_IMAGE2_KHR = transmute(dlsym(handle, c"vkCmdBlitImage2KHR".as_ptr()));
    VK_CMD_RESOLVE_IMAGE2_KHR = transmute(dlsym(handle, c"vkCmdResolveImage2KHR".as_ptr()));
    VK_CMD_TRACE_RAYS_INDIRECT2_KHR = transmute(dlsym(handle, c"vkCmdTraceRaysIndirect2KHR".as_ptr()));
    VK_GET_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR = transmute(dlsym(handle, c"vkGetDeviceBufferMemoryRequirementsKHR".as_ptr()));
    VK_GET_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR = transmute(dlsym(handle, c"vkGetDeviceImageMemoryRequirementsKHR".as_ptr()));
    VK_GET_DEVICE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_KHR = transmute(dlsym(handle, c"vkGetDeviceImageSparseMemoryRequirementsKHR".as_ptr()));
    VK_CMD_BIND_INDEX_BUFFER2_KHR = transmute(dlsym(handle, c"vkCmdBindIndexBuffer2KHR".as_ptr()));
    VK_GET_RENDERING_AREA_GRANULARITY_KHR = transmute(dlsym(handle, c"vkGetRenderingAreaGranularityKHR".as_ptr()));
    VK_GET_DEVICE_IMAGE_SUBRESOURCE_LAYOUT_KHR = transmute(dlsym(handle, c"vkGetDeviceImageSubresourceLayoutKHR".as_ptr()));
    VK_GET_IMAGE_SUBRESOURCE_LAYOUT2_KHR = transmute(dlsym(handle, c"vkGetImageSubresourceLayout2KHR".as_ptr()));
    VK_CREATE_PIPELINE_BINARIES_KHR = transmute(dlsym(handle, c"vkCreatePipelineBinariesKHR".as_ptr()));
    VK_DESTROY_PIPELINE_BINARY_KHR = transmute(dlsym(handle, c"vkDestroyPipelineBinaryKHR".as_ptr()));
    VK_GET_PIPELINE_KEY_KHR = transmute(dlsym(handle, c"vkGetPipelineKeyKHR".as_ptr()));
    VK_GET_PIPELINE_BINARY_DATA_KHR = transmute(dlsym(handle, c"vkGetPipelineBinaryDataKHR".as_ptr()));
    VK_RELEASE_CAPTURED_PIPELINE_DATA_KHR = transmute(dlsym(handle, c"vkReleaseCapturedPipelineDataKHR".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_KHR = transmute(dlsym(handle, c"vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR".as_ptr()));
    VK_CMD_SET_LINE_STIPPLE_KHR = transmute(dlsym(handle, c"vkCmdSetLineStippleKHR".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_CALIBRATEABLE_TIME_DOMAINS_KHR = transmute(dlsym(handle, c"vkGetPhysicalDeviceCalibrateableTimeDomainsKHR".as_ptr()));
    VK_GET_CALIBRATED_TIMESTAMPS_KHR = transmute(dlsym(handle, c"vkGetCalibratedTimestampsKHR".as_ptr()));
    VK_CMD_BIND_DESCRIPTOR_SETS2_KHR = transmute(dlsym(handle, c"vkCmdBindDescriptorSets2KHR".as_ptr()));
    VK_CMD_PUSH_CONSTANTS2_KHR = transmute(dlsym(handle, c"vkCmdPushConstants2KHR".as_ptr()));
    VK_CMD_PUSH_DESCRIPTOR_SET2_KHR = transmute(dlsym(handle, c"vkCmdPushDescriptorSet2KHR".as_ptr()));
    VK_CMD_PUSH_DESCRIPTOR_SET_WITH_TEMPLATE2_KHR = transmute(dlsym(handle, c"vkCmdPushDescriptorSetWithTemplate2KHR".as_ptr()));
    VK_CMD_SET_DESCRIPTOR_BUFFER_OFFSETS2_EXT = transmute(dlsym(handle, c"vkCmdSetDescriptorBufferOffsets2EXT".as_ptr()));
    VK_CMD_BIND_DESCRIPTOR_BUFFER_EMBEDDED_SAMPLERS2_EXT = transmute(dlsym(handle, c"vkCmdBindDescriptorBufferEmbeddedSamplers2EXT".as_ptr()));
    VK_CREATE_DEBUG_REPORT_CALLBACK_EXT = transmute(dlsym(handle, c"vkCreateDebugReportCallbackEXT".as_ptr()));
    VK_DESTROY_DEBUG_REPORT_CALLBACK_EXT = transmute(dlsym(handle, c"vkDestroyDebugReportCallbackEXT".as_ptr()));
    VK_DEBUG_REPORT_MESSAGE_EXT = transmute(dlsym(handle, c"vkDebugReportMessageEXT".as_ptr()));
    VK_DEBUG_MARKER_SET_OBJECT_TAG_EXT = transmute(dlsym(handle, c"vkDebugMarkerSetObjectTagEXT".as_ptr()));
    VK_DEBUG_MARKER_SET_OBJECT_NAME_EXT = transmute(dlsym(handle, c"vkDebugMarkerSetObjectNameEXT".as_ptr()));
    VK_CMD_DEBUG_MARKER_BEGIN_EXT = transmute(dlsym(handle, c"vkCmdDebugMarkerBeginEXT".as_ptr()));
    VK_CMD_DEBUG_MARKER_END_EXT = transmute(dlsym(handle, c"vkCmdDebugMarkerEndEXT".as_ptr()));
    VK_CMD_DEBUG_MARKER_INSERT_EXT = transmute(dlsym(handle, c"vkCmdDebugMarkerInsertEXT".as_ptr()));
    VK_CMD_BIND_TRANSFORM_FEEDBACK_BUFFERS_EXT = transmute(dlsym(handle, c"vkCmdBindTransformFeedbackBuffersEXT".as_ptr()));
    VK_CMD_BEGIN_TRANSFORM_FEEDBACK_EXT = transmute(dlsym(handle, c"vkCmdBeginTransformFeedbackEXT".as_ptr()));
    VK_CMD_END_TRANSFORM_FEEDBACK_EXT = transmute(dlsym(handle, c"vkCmdEndTransformFeedbackEXT".as_ptr()));
    VK_CMD_BEGIN_QUERY_INDEXED_EXT = transmute(dlsym(handle, c"vkCmdBeginQueryIndexedEXT".as_ptr()));
    VK_CMD_END_QUERY_INDEXED_EXT = transmute(dlsym(handle, c"vkCmdEndQueryIndexedEXT".as_ptr()));
    VK_CMD_DRAW_INDIRECT_BYTE_COUNT_EXT = transmute(dlsym(handle, c"vkCmdDrawIndirectByteCountEXT".as_ptr()));
    VK_CREATE_CU_MODULE_NVX = transmute(dlsym(handle, c"vkCreateCuModuleNVX".as_ptr()));
    VK_CREATE_CU_FUNCTION_NVX = transmute(dlsym(handle, c"vkCreateCuFunctionNVX".as_ptr()));
    VK_DESTROY_CU_MODULE_NVX = transmute(dlsym(handle, c"vkDestroyCuModuleNVX".as_ptr()));
    VK_DESTROY_CU_FUNCTION_NVX = transmute(dlsym(handle, c"vkDestroyCuFunctionNVX".as_ptr()));
    VK_CMD_CU_LAUNCH_KERNEL_NVX = transmute(dlsym(handle, c"vkCmdCuLaunchKernelNVX".as_ptr()));
    VK_GET_IMAGE_VIEW_HANDLE_NVX = transmute(dlsym(handle, c"vkGetImageViewHandleNVX".as_ptr()));
    VK_GET_IMAGE_VIEW_HANDLE64_NVX = transmute(dlsym(handle, c"vkGetImageViewHandle64NVX".as_ptr()));
    VK_GET_IMAGE_VIEW_ADDRESS_NVX = transmute(dlsym(handle, c"vkGetImageViewAddressNVX".as_ptr()));
    VK_CMD_DRAW_INDIRECT_COUNT_AMD = transmute(dlsym(handle, c"vkCmdDrawIndirectCountAMD".as_ptr()));
    VK_CMD_DRAW_INDEXED_INDIRECT_COUNT_AMD = transmute(dlsym(handle, c"vkCmdDrawIndexedIndirectCountAMD".as_ptr()));
    VK_GET_SHADER_INFO_AMD = transmute(dlsym(handle, c"vkGetShaderInfoAMD".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_NV = transmute(dlsym(handle, c"vkGetPhysicalDeviceExternalImageFormatPropertiesNV".as_ptr()));
    VK_CMD_BEGIN_CONDITIONAL_RENDERING_EXT = transmute(dlsym(handle, c"vkCmdBeginConditionalRenderingEXT".as_ptr()));
    VK_CMD_END_CONDITIONAL_RENDERING_EXT = transmute(dlsym(handle, c"vkCmdEndConditionalRenderingEXT".as_ptr()));
    VK_CMD_SET_VIEWPORT_WSCALING_NV = transmute(dlsym(handle, c"vkCmdSetViewportWScalingNV".as_ptr()));
    VK_RELEASE_DISPLAY_EXT = transmute(dlsym(handle, c"vkReleaseDisplayEXT".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_SURFACE_CAPABILITIES2_EXT = transmute(dlsym(handle, c"vkGetPhysicalDeviceSurfaceCapabilities2EXT".as_ptr()));
    VK_DISPLAY_POWER_CONTROL_EXT = transmute(dlsym(handle, c"vkDisplayPowerControlEXT".as_ptr()));
    VK_REGISTER_DEVICE_EVENT_EXT = transmute(dlsym(handle, c"vkRegisterDeviceEventEXT".as_ptr()));
    VK_REGISTER_DISPLAY_EVENT_EXT = transmute(dlsym(handle, c"vkRegisterDisplayEventEXT".as_ptr()));
    VK_GET_SWAPCHAIN_COUNTER_EXT = transmute(dlsym(handle, c"vkGetSwapchainCounterEXT".as_ptr()));
    VK_GET_REFRESH_CYCLE_DURATION_GOOGLE = transmute(dlsym(handle, c"vkGetRefreshCycleDurationGOOGLE".as_ptr()));
    VK_GET_PAST_PRESENTATION_TIMING_GOOGLE = transmute(dlsym(handle, c"vkGetPastPresentationTimingGOOGLE".as_ptr()));
    VK_CMD_SET_DISCARD_RECTANGLE_EXT = transmute(dlsym(handle, c"vkCmdSetDiscardRectangleEXT".as_ptr()));
    VK_CMD_SET_DISCARD_RECTANGLE_ENABLE_EXT = transmute(dlsym(handle, c"vkCmdSetDiscardRectangleEnableEXT".as_ptr()));
    VK_CMD_SET_DISCARD_RECTANGLE_MODE_EXT = transmute(dlsym(handle, c"vkCmdSetDiscardRectangleModeEXT".as_ptr()));
    VK_SET_HDR_METADATA_EXT = transmute(dlsym(handle, c"vkSetHdrMetadataEXT".as_ptr()));
    VK_SET_DEBUG_UTILS_OBJECT_NAME_EXT = transmute(dlsym(handle, c"vkSetDebugUtilsObjectNameEXT".as_ptr()));
    VK_SET_DEBUG_UTILS_OBJECT_TAG_EXT = transmute(dlsym(handle, c"vkSetDebugUtilsObjectTagEXT".as_ptr()));
    VK_QUEUE_BEGIN_DEBUG_UTILS_LABEL_EXT = transmute(dlsym(handle, c"vkQueueBeginDebugUtilsLabelEXT".as_ptr()));
    VK_QUEUE_END_DEBUG_UTILS_LABEL_EXT = transmute(dlsym(handle, c"vkQueueEndDebugUtilsLabelEXT".as_ptr()));
    VK_QUEUE_INSERT_DEBUG_UTILS_LABEL_EXT = transmute(dlsym(handle, c"vkQueueInsertDebugUtilsLabelEXT".as_ptr()));
    VK_CMD_BEGIN_DEBUG_UTILS_LABEL_EXT = transmute(dlsym(handle, c"vkCmdBeginDebugUtilsLabelEXT".as_ptr()));
    VK_CMD_END_DEBUG_UTILS_LABEL_EXT = transmute(dlsym(handle, c"vkCmdEndDebugUtilsLabelEXT".as_ptr()));
    VK_CMD_INSERT_DEBUG_UTILS_LABEL_EXT = transmute(dlsym(handle, c"vkCmdInsertDebugUtilsLabelEXT".as_ptr()));
    VK_CREATE_DEBUG_UTILS_MESSENGER_EXT = transmute(dlsym(handle, c"vkCreateDebugUtilsMessengerEXT".as_ptr()));
    VK_DESTROY_DEBUG_UTILS_MESSENGER_EXT = transmute(dlsym(handle, c"vkDestroyDebugUtilsMessengerEXT".as_ptr()));
    VK_SUBMIT_DEBUG_UTILS_MESSAGE_EXT = transmute(dlsym(handle, c"vkSubmitDebugUtilsMessageEXT".as_ptr()));
    VK_CMD_SET_SAMPLE_LOCATIONS_EXT = transmute(dlsym(handle, c"vkCmdSetSampleLocationsEXT".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_MULTISAMPLE_PROPERTIES_EXT = transmute(dlsym(handle, c"vkGetPhysicalDeviceMultisamplePropertiesEXT".as_ptr()));
    VK_GET_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT = transmute(dlsym(handle, c"vkGetImageDrmFormatModifierPropertiesEXT".as_ptr()));
    VK_CREATE_VALIDATION_CACHE_EXT = transmute(dlsym(handle, c"vkCreateValidationCacheEXT".as_ptr()));
    VK_DESTROY_VALIDATION_CACHE_EXT = transmute(dlsym(handle, c"vkDestroyValidationCacheEXT".as_ptr()));
    VK_MERGE_VALIDATION_CACHES_EXT = transmute(dlsym(handle, c"vkMergeValidationCachesEXT".as_ptr()));
    VK_GET_VALIDATION_CACHE_DATA_EXT = transmute(dlsym(handle, c"vkGetValidationCacheDataEXT".as_ptr()));
    VK_CMD_BIND_SHADING_RATE_IMAGE_NV = transmute(dlsym(handle, c"vkCmdBindShadingRateImageNV".as_ptr()));
    VK_CMD_SET_VIEWPORT_SHADING_RATE_PALETTE_NV = transmute(dlsym(handle, c"vkCmdSetViewportShadingRatePaletteNV".as_ptr()));
    VK_CMD_SET_COARSE_SAMPLE_ORDER_NV = transmute(dlsym(handle, c"vkCmdSetCoarseSampleOrderNV".as_ptr()));
    VK_CREATE_ACCELERATION_STRUCTURE_NV = transmute(dlsym(handle, c"vkCreateAccelerationStructureNV".as_ptr()));
    VK_DESTROY_ACCELERATION_STRUCTURE_NV = transmute(dlsym(handle, c"vkDestroyAccelerationStructureNV".as_ptr()));
    VK_GET_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_NV = transmute(dlsym(handle, c"vkGetAccelerationStructureMemoryRequirementsNV".as_ptr()));
    VK_BIND_ACCELERATION_STRUCTURE_MEMORY_NV = transmute(dlsym(handle, c"vkBindAccelerationStructureMemoryNV".as_ptr()));
    VK_CMD_BUILD_ACCELERATION_STRUCTURE_NV = transmute(dlsym(handle, c"vkCmdBuildAccelerationStructureNV".as_ptr()));
    VK_CMD_COPY_ACCELERATION_STRUCTURE_NV = transmute(dlsym(handle, c"vkCmdCopyAccelerationStructureNV".as_ptr()));
    VK_CMD_TRACE_RAYS_NV = transmute(dlsym(handle, c"vkCmdTraceRaysNV".as_ptr()));
    VK_CREATE_RAY_TRACING_PIPELINES_NV = transmute(dlsym(handle, c"vkCreateRayTracingPipelinesNV".as_ptr()));
    VK_GET_RAY_TRACING_SHADER_GROUP_HANDLES_KHR = transmute(dlsym(handle, c"vkGetRayTracingShaderGroupHandlesKHR".as_ptr()));
    VK_GET_RAY_TRACING_SHADER_GROUP_HANDLES_NV = transmute(dlsym(handle, c"vkGetRayTracingShaderGroupHandlesNV".as_ptr()));
    VK_GET_ACCELERATION_STRUCTURE_HANDLE_NV = transmute(dlsym(handle, c"vkGetAccelerationStructureHandleNV".as_ptr()));
    VK_CMD_WRITE_ACCELERATION_STRUCTURES_PROPERTIES_NV = transmute(dlsym(handle, c"vkCmdWriteAccelerationStructuresPropertiesNV".as_ptr()));
    VK_COMPILE_DEFERRED_NV = transmute(dlsym(handle, c"vkCompileDeferredNV".as_ptr()));
    VK_GET_MEMORY_HOST_POINTER_PROPERTIES_EXT = transmute(dlsym(handle, c"vkGetMemoryHostPointerPropertiesEXT".as_ptr()));
    VK_CMD_WRITE_BUFFER_MARKER_AMD = transmute(dlsym(handle, c"vkCmdWriteBufferMarkerAMD".as_ptr()));
    VK_CMD_WRITE_BUFFER_MARKER2_AMD = transmute(dlsym(handle, c"vkCmdWriteBufferMarker2AMD".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_CALIBRATEABLE_TIME_DOMAINS_EXT = transmute(dlsym(handle, c"vkGetPhysicalDeviceCalibrateableTimeDomainsEXT".as_ptr()));
    VK_GET_CALIBRATED_TIMESTAMPS_EXT = transmute(dlsym(handle, c"vkGetCalibratedTimestampsEXT".as_ptr()));
    VK_CMD_DRAW_MESH_TASKS_NV = transmute(dlsym(handle, c"vkCmdDrawMeshTasksNV".as_ptr()));
    VK_CMD_DRAW_MESH_TASKS_INDIRECT_NV = transmute(dlsym(handle, c"vkCmdDrawMeshTasksIndirectNV".as_ptr()));
    VK_CMD_DRAW_MESH_TASKS_INDIRECT_COUNT_NV = transmute(dlsym(handle, c"vkCmdDrawMeshTasksIndirectCountNV".as_ptr()));
    VK_CMD_SET_EXCLUSIVE_SCISSOR_ENABLE_NV = transmute(dlsym(handle, c"vkCmdSetExclusiveScissorEnableNV".as_ptr()));
    VK_CMD_SET_EXCLUSIVE_SCISSOR_NV = transmute(dlsym(handle, c"vkCmdSetExclusiveScissorNV".as_ptr()));
    VK_CMD_SET_CHECKPOINT_NV = transmute(dlsym(handle, c"vkCmdSetCheckpointNV".as_ptr()));
    VK_GET_QUEUE_CHECKPOINT_DATA_NV = transmute(dlsym(handle, c"vkGetQueueCheckpointDataNV".as_ptr()));
    VK_GET_QUEUE_CHECKPOINT_DATA2_NV = transmute(dlsym(handle, c"vkGetQueueCheckpointData2NV".as_ptr()));
    VK_INITIALIZE_PERFORMANCE_API_INTEL = transmute(dlsym(handle, c"vkInitializePerformanceApiINTEL".as_ptr()));
    VK_UNINITIALIZE_PERFORMANCE_API_INTEL = transmute(dlsym(handle, c"vkUninitializePerformanceApiINTEL".as_ptr()));
    VK_CMD_SET_PERFORMANCE_MARKER_INTEL = transmute(dlsym(handle, c"vkCmdSetPerformanceMarkerINTEL".as_ptr()));
    VK_CMD_SET_PERFORMANCE_STREAM_MARKER_INTEL = transmute(dlsym(handle, c"vkCmdSetPerformanceStreamMarkerINTEL".as_ptr()));
    VK_CMD_SET_PERFORMANCE_OVERRIDE_INTEL = transmute(dlsym(handle, c"vkCmdSetPerformanceOverrideINTEL".as_ptr()));
    VK_ACQUIRE_PERFORMANCE_CONFIGURATION_INTEL = transmute(dlsym(handle, c"vkAcquirePerformanceConfigurationINTEL".as_ptr()));
    VK_RELEASE_PERFORMANCE_CONFIGURATION_INTEL = transmute(dlsym(handle, c"vkReleasePerformanceConfigurationINTEL".as_ptr()));
    VK_QUEUE_SET_PERFORMANCE_CONFIGURATION_INTEL = transmute(dlsym(handle, c"vkQueueSetPerformanceConfigurationINTEL".as_ptr()));
    VK_GET_PERFORMANCE_PARAMETER_INTEL = transmute(dlsym(handle, c"vkGetPerformanceParameterINTEL".as_ptr()));
    VK_SET_LOCAL_DIMMING_AMD = transmute(dlsym(handle, c"vkSetLocalDimmingAMD".as_ptr()));
    VK_GET_BUFFER_DEVICE_ADDRESS_EXT = transmute(dlsym(handle, c"vkGetBufferDeviceAddressEXT".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT = transmute(dlsym(handle, c"vkGetPhysicalDeviceToolPropertiesEXT".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV = transmute(dlsym(handle, c"vkGetPhysicalDeviceCooperativeMatrixPropertiesNV".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_SUPPORTED_FRAMEBUFFER_MIXED_SAMPLES_COMBINATIONS_NV = transmute(dlsym(handle, c"vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV".as_ptr()));
    VK_CREATE_HEADLESS_SURFACE_EXT = transmute(dlsym(handle, c"vkCreateHeadlessSurfaceEXT".as_ptr()));
    VK_CMD_SET_LINE_STIPPLE_EXT = transmute(dlsym(handle, c"vkCmdSetLineStippleEXT".as_ptr()));
    VK_RESET_QUERY_POOL_EXT = transmute(dlsym(handle, c"vkResetQueryPoolEXT".as_ptr()));
    VK_CMD_SET_CULL_MODE_EXT = transmute(dlsym(handle, c"vkCmdSetCullModeEXT".as_ptr()));
    VK_CMD_SET_FRONT_FACE_EXT = transmute(dlsym(handle, c"vkCmdSetFrontFaceEXT".as_ptr()));
    VK_CMD_SET_PRIMITIVE_TOPOLOGY_EXT = transmute(dlsym(handle, c"vkCmdSetPrimitiveTopologyEXT".as_ptr()));
    VK_CMD_SET_VIEWPORT_WITH_COUNT_EXT = transmute(dlsym(handle, c"vkCmdSetViewportWithCountEXT".as_ptr()));
    VK_CMD_SET_SCISSOR_WITH_COUNT_EXT = transmute(dlsym(handle, c"vkCmdSetScissorWithCountEXT".as_ptr()));
    VK_CMD_BIND_VERTEX_BUFFERS2_EXT = transmute(dlsym(handle, c"vkCmdBindVertexBuffers2EXT".as_ptr()));
    VK_CMD_SET_DEPTH_TEST_ENABLE_EXT = transmute(dlsym(handle, c"vkCmdSetDepthTestEnableEXT".as_ptr()));
    VK_CMD_SET_DEPTH_WRITE_ENABLE_EXT = transmute(dlsym(handle, c"vkCmdSetDepthWriteEnableEXT".as_ptr()));
    VK_CMD_SET_DEPTH_COMPARE_OP_EXT = transmute(dlsym(handle, c"vkCmdSetDepthCompareOpEXT".as_ptr()));
    VK_CMD_SET_DEPTH_BOUNDS_TEST_ENABLE_EXT = transmute(dlsym(handle, c"vkCmdSetDepthBoundsTestEnableEXT".as_ptr()));
    VK_CMD_SET_STENCIL_TEST_ENABLE_EXT = transmute(dlsym(handle, c"vkCmdSetStencilTestEnableEXT".as_ptr()));
    VK_CMD_SET_STENCIL_OP_EXT = transmute(dlsym(handle, c"vkCmdSetStencilOpEXT".as_ptr()));
    VK_COPY_MEMORY_TO_IMAGE_EXT = transmute(dlsym(handle, c"vkCopyMemoryToImageEXT".as_ptr()));
    VK_COPY_IMAGE_TO_MEMORY_EXT = transmute(dlsym(handle, c"vkCopyImageToMemoryEXT".as_ptr()));
    VK_COPY_IMAGE_TO_IMAGE_EXT = transmute(dlsym(handle, c"vkCopyImageToImageEXT".as_ptr()));
    VK_TRANSITION_IMAGE_LAYOUT_EXT = transmute(dlsym(handle, c"vkTransitionImageLayoutEXT".as_ptr()));
    VK_GET_IMAGE_SUBRESOURCE_LAYOUT2_EXT = transmute(dlsym(handle, c"vkGetImageSubresourceLayout2EXT".as_ptr()));
    VK_RELEASE_SWAPCHAIN_IMAGES_EXT = transmute(dlsym(handle, c"vkReleaseSwapchainImagesEXT".as_ptr()));
    VK_GET_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_NV = transmute(dlsym(handle, c"vkGetGeneratedCommandsMemoryRequirementsNV".as_ptr()));
    VK_CMD_PREPROCESS_GENERATED_COMMANDS_NV = transmute(dlsym(handle, c"vkCmdPreprocessGeneratedCommandsNV".as_ptr()));
    VK_CMD_EXECUTE_GENERATED_COMMANDS_NV = transmute(dlsym(handle, c"vkCmdExecuteGeneratedCommandsNV".as_ptr()));
    VK_CMD_BIND_PIPELINE_SHADER_GROUP_NV = transmute(dlsym(handle, c"vkCmdBindPipelineShaderGroupNV".as_ptr()));
    VK_CREATE_INDIRECT_COMMANDS_LAYOUT_NV = transmute(dlsym(handle, c"vkCreateIndirectCommandsLayoutNV".as_ptr()));
    VK_DESTROY_INDIRECT_COMMANDS_LAYOUT_NV = transmute(dlsym(handle, c"vkDestroyIndirectCommandsLayoutNV".as_ptr()));
    VK_CMD_SET_DEPTH_BIAS2_EXT = transmute(dlsym(handle, c"vkCmdSetDepthBias2EXT".as_ptr()));
    VK_ACQUIRE_DRM_DISPLAY_EXT = transmute(dlsym(handle, c"vkAcquireDrmDisplayEXT".as_ptr()));
    VK_GET_DRM_DISPLAY_EXT = transmute(dlsym(handle, c"vkGetDrmDisplayEXT".as_ptr()));
    VK_CREATE_PRIVATE_DATA_SLOT_EXT = transmute(dlsym(handle, c"vkCreatePrivateDataSlotEXT".as_ptr()));
    VK_DESTROY_PRIVATE_DATA_SLOT_EXT = transmute(dlsym(handle, c"vkDestroyPrivateDataSlotEXT".as_ptr()));
    VK_SET_PRIVATE_DATA_EXT = transmute(dlsym(handle, c"vkSetPrivateDataEXT".as_ptr()));
    VK_GET_PRIVATE_DATA_EXT = transmute(dlsym(handle, c"vkGetPrivateDataEXT".as_ptr()));
    VK_CREATE_CUDA_MODULE_NV = transmute(dlsym(handle, c"vkCreateCudaModuleNV".as_ptr()));
    VK_GET_CUDA_MODULE_CACHE_NV = transmute(dlsym(handle, c"vkGetCudaModuleCacheNV".as_ptr()));
    VK_CREATE_CUDA_FUNCTION_NV = transmute(dlsym(handle, c"vkCreateCudaFunctionNV".as_ptr()));
    VK_DESTROY_CUDA_MODULE_NV = transmute(dlsym(handle, c"vkDestroyCudaModuleNV".as_ptr()));
    VK_DESTROY_CUDA_FUNCTION_NV = transmute(dlsym(handle, c"vkDestroyCudaFunctionNV".as_ptr()));
    VK_CMD_CUDA_LAUNCH_KERNEL_NV = transmute(dlsym(handle, c"vkCmdCudaLaunchKernelNV".as_ptr()));
    VK_GET_DESCRIPTOR_SET_LAYOUT_SIZE_EXT = transmute(dlsym(handle, c"vkGetDescriptorSetLayoutSizeEXT".as_ptr()));
    VK_GET_DESCRIPTOR_SET_LAYOUT_BINDING_OFFSET_EXT = transmute(dlsym(handle, c"vkGetDescriptorSetLayoutBindingOffsetEXT".as_ptr()));
    VK_GET_DESCRIPTOR_EXT = transmute(dlsym(handle, c"vkGetDescriptorEXT".as_ptr()));
    VK_CMD_BIND_DESCRIPTOR_BUFFERS_EXT = transmute(dlsym(handle, c"vkCmdBindDescriptorBuffersEXT".as_ptr()));
    VK_CMD_SET_DESCRIPTOR_BUFFER_OFFSETS_EXT = transmute(dlsym(handle, c"vkCmdSetDescriptorBufferOffsetsEXT".as_ptr()));
    VK_CMD_BIND_DESCRIPTOR_BUFFER_EMBEDDED_SAMPLERS_EXT = transmute(dlsym(handle, c"vkCmdBindDescriptorBufferEmbeddedSamplersEXT".as_ptr()));
    VK_GET_BUFFER_OPAQUE_CAPTURE_DESCRIPTOR_DATA_EXT = transmute(dlsym(handle, c"vkGetBufferOpaqueCaptureDescriptorDataEXT".as_ptr()));
    VK_GET_IMAGE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_EXT = transmute(dlsym(handle, c"vkGetImageOpaqueCaptureDescriptorDataEXT".as_ptr()));
    VK_GET_IMAGE_VIEW_OPAQUE_CAPTURE_DESCRIPTOR_DATA_EXT = transmute(dlsym(handle, c"vkGetImageViewOpaqueCaptureDescriptorDataEXT".as_ptr()));
    VK_GET_SAMPLER_OPAQUE_CAPTURE_DESCRIPTOR_DATA_EXT = transmute(dlsym(handle, c"vkGetSamplerOpaqueCaptureDescriptorDataEXT".as_ptr()));
    VK_GET_ACCELERATION_STRUCTURE_OPAQUE_CAPTURE_DESCRIPTOR_DATA_EXT = transmute(dlsym(handle, c"vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT".as_ptr()));
    VK_CMD_SET_FRAGMENT_SHADING_RATE_ENUM_NV = transmute(dlsym(handle, c"vkCmdSetFragmentShadingRateEnumNV".as_ptr()));
    VK_GET_DEVICE_FAULT_INFO_EXT = transmute(dlsym(handle, c"vkGetDeviceFaultInfoEXT".as_ptr()));
    VK_CMD_SET_VERTEX_INPUT_EXT = transmute(dlsym(handle, c"vkCmdSetVertexInputEXT".as_ptr()));
    VK_GET_DEVICE_SUBPASS_SHADING_MAX_WORKGROUP_SIZE_HUAWEI = transmute(dlsym(handle, c"vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI".as_ptr()));
    VK_CMD_SUBPASS_SHADING_HUAWEI = transmute(dlsym(handle, c"vkCmdSubpassShadingHUAWEI".as_ptr()));
    VK_CMD_BIND_INVOCATION_MASK_HUAWEI = transmute(dlsym(handle, c"vkCmdBindInvocationMaskHUAWEI".as_ptr()));
    VK_GET_MEMORY_REMOTE_ADDRESS_NV = transmute(dlsym(handle, c"vkGetMemoryRemoteAddressNV".as_ptr()));
    VK_GET_PIPELINE_PROPERTIES_EXT = transmute(dlsym(handle, c"vkGetPipelinePropertiesEXT".as_ptr()));
    VK_CMD_SET_PATCH_CONTROL_POINTS_EXT = transmute(dlsym(handle, c"vkCmdSetPatchControlPointsEXT".as_ptr()));
    VK_CMD_SET_RASTERIZER_DISCARD_ENABLE_EXT = transmute(dlsym(handle, c"vkCmdSetRasterizerDiscardEnableEXT".as_ptr()));
    VK_CMD_SET_DEPTH_BIAS_ENABLE_EXT = transmute(dlsym(handle, c"vkCmdSetDepthBiasEnableEXT".as_ptr()));
    VK_CMD_SET_LOGIC_OP_EXT = transmute(dlsym(handle, c"vkCmdSetLogicOpEXT".as_ptr()));
    VK_CMD_SET_PRIMITIVE_RESTART_ENABLE_EXT = transmute(dlsym(handle, c"vkCmdSetPrimitiveRestartEnableEXT".as_ptr()));
    VK_CMD_SET_COLOR_WRITE_ENABLE_EXT = transmute(dlsym(handle, c"vkCmdSetColorWriteEnableEXT".as_ptr()));
    VK_CMD_DRAW_MULTI_EXT = transmute(dlsym(handle, c"vkCmdDrawMultiEXT".as_ptr()));
    VK_CMD_DRAW_MULTI_INDEXED_EXT = transmute(dlsym(handle, c"vkCmdDrawMultiIndexedEXT".as_ptr()));
    VK_CREATE_MICROMAP_EXT = transmute(dlsym(handle, c"vkCreateMicromapEXT".as_ptr()));
    VK_DESTROY_MICROMAP_EXT = transmute(dlsym(handle, c"vkDestroyMicromapEXT".as_ptr()));
    VK_CMD_BUILD_MICROMAPS_EXT = transmute(dlsym(handle, c"vkCmdBuildMicromapsEXT".as_ptr()));
    VK_BUILD_MICROMAPS_EXT = transmute(dlsym(handle, c"vkBuildMicromapsEXT".as_ptr()));
    VK_COPY_MICROMAP_EXT = transmute(dlsym(handle, c"vkCopyMicromapEXT".as_ptr()));
    VK_COPY_MICROMAP_TO_MEMORY_EXT = transmute(dlsym(handle, c"vkCopyMicromapToMemoryEXT".as_ptr()));
    VK_COPY_MEMORY_TO_MICROMAP_EXT = transmute(dlsym(handle, c"vkCopyMemoryToMicromapEXT".as_ptr()));
    VK_WRITE_MICROMAPS_PROPERTIES_EXT = transmute(dlsym(handle, c"vkWriteMicromapsPropertiesEXT".as_ptr()));
    VK_CMD_COPY_MICROMAP_EXT = transmute(dlsym(handle, c"vkCmdCopyMicromapEXT".as_ptr()));
    VK_CMD_COPY_MICROMAP_TO_MEMORY_EXT = transmute(dlsym(handle, c"vkCmdCopyMicromapToMemoryEXT".as_ptr()));
    VK_CMD_COPY_MEMORY_TO_MICROMAP_EXT = transmute(dlsym(handle, c"vkCmdCopyMemoryToMicromapEXT".as_ptr()));
    VK_CMD_WRITE_MICROMAPS_PROPERTIES_EXT = transmute(dlsym(handle, c"vkCmdWriteMicromapsPropertiesEXT".as_ptr()));
    VK_GET_DEVICE_MICROMAP_COMPATIBILITY_EXT = transmute(dlsym(handle, c"vkGetDeviceMicromapCompatibilityEXT".as_ptr()));
    VK_GET_MICROMAP_BUILD_SIZES_EXT = transmute(dlsym(handle, c"vkGetMicromapBuildSizesEXT".as_ptr()));
    VK_CMD_DRAW_CLUSTER_HUAWEI = transmute(dlsym(handle, c"vkCmdDrawClusterHUAWEI".as_ptr()));
    VK_CMD_DRAW_CLUSTER_INDIRECT_HUAWEI = transmute(dlsym(handle, c"vkCmdDrawClusterIndirectHUAWEI".as_ptr()));
    VK_SET_DEVICE_MEMORY_PRIORITY_EXT = transmute(dlsym(handle, c"vkSetDeviceMemoryPriorityEXT".as_ptr()));
    VK_GET_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE = transmute(dlsym(handle, c"vkGetDescriptorSetLayoutHostMappingInfoVALVE".as_ptr()));
    VK_GET_DESCRIPTOR_SET_HOST_MAPPING_VALVE = transmute(dlsym(handle, c"vkGetDescriptorSetHostMappingVALVE".as_ptr()));
    VK_CMD_COPY_MEMORY_INDIRECT_NV = transmute(dlsym(handle, c"vkCmdCopyMemoryIndirectNV".as_ptr()));
    VK_CMD_COPY_MEMORY_TO_IMAGE_INDIRECT_NV = transmute(dlsym(handle, c"vkCmdCopyMemoryToImageIndirectNV".as_ptr()));
    VK_CMD_DECOMPRESS_MEMORY_NV = transmute(dlsym(handle, c"vkCmdDecompressMemoryNV".as_ptr()));
    VK_CMD_DECOMPRESS_MEMORY_INDIRECT_COUNT_NV = transmute(dlsym(handle, c"vkCmdDecompressMemoryIndirectCountNV".as_ptr()));
    VK_GET_PIPELINE_INDIRECT_MEMORY_REQUIREMENTS_NV = transmute(dlsym(handle, c"vkGetPipelineIndirectMemoryRequirementsNV".as_ptr()));
    VK_CMD_UPDATE_PIPELINE_INDIRECT_BUFFER_NV = transmute(dlsym(handle, c"vkCmdUpdatePipelineIndirectBufferNV".as_ptr()));
    VK_GET_PIPELINE_INDIRECT_DEVICE_ADDRESS_NV = transmute(dlsym(handle, c"vkGetPipelineIndirectDeviceAddressNV".as_ptr()));
    VK_CMD_SET_DEPTH_CLAMP_ENABLE_EXT = transmute(dlsym(handle, c"vkCmdSetDepthClampEnableEXT".as_ptr()));
    VK_CMD_SET_POLYGON_MODE_EXT = transmute(dlsym(handle, c"vkCmdSetPolygonModeEXT".as_ptr()));
    VK_CMD_SET_RASTERIZATION_SAMPLES_EXT = transmute(dlsym(handle, c"vkCmdSetRasterizationSamplesEXT".as_ptr()));
    VK_CMD_SET_SAMPLE_MASK_EXT = transmute(dlsym(handle, c"vkCmdSetSampleMaskEXT".as_ptr()));
    VK_CMD_SET_ALPHA_TO_COVERAGE_ENABLE_EXT = transmute(dlsym(handle, c"vkCmdSetAlphaToCoverageEnableEXT".as_ptr()));
    VK_CMD_SET_ALPHA_TO_ONE_ENABLE_EXT = transmute(dlsym(handle, c"vkCmdSetAlphaToOneEnableEXT".as_ptr()));
    VK_CMD_SET_LOGIC_OP_ENABLE_EXT = transmute(dlsym(handle, c"vkCmdSetLogicOpEnableEXT".as_ptr()));
    VK_CMD_SET_COLOR_BLEND_ENABLE_EXT = transmute(dlsym(handle, c"vkCmdSetColorBlendEnableEXT".as_ptr()));
    VK_CMD_SET_COLOR_BLEND_EQUATION_EXT = transmute(dlsym(handle, c"vkCmdSetColorBlendEquationEXT".as_ptr()));
    VK_CMD_SET_COLOR_WRITE_MASK_EXT = transmute(dlsym(handle, c"vkCmdSetColorWriteMaskEXT".as_ptr()));
    VK_CMD_SET_TESSELLATION_DOMAIN_ORIGIN_EXT = transmute(dlsym(handle, c"vkCmdSetTessellationDomainOriginEXT".as_ptr()));
    VK_CMD_SET_RASTERIZATION_STREAM_EXT = transmute(dlsym(handle, c"vkCmdSetRasterizationStreamEXT".as_ptr()));
    VK_CMD_SET_CONSERVATIVE_RASTERIZATION_MODE_EXT = transmute(dlsym(handle, c"vkCmdSetConservativeRasterizationModeEXT".as_ptr()));
    VK_CMD_SET_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT = transmute(dlsym(handle, c"vkCmdSetExtraPrimitiveOverestimationSizeEXT".as_ptr()));
    VK_CMD_SET_DEPTH_CLIP_ENABLE_EXT = transmute(dlsym(handle, c"vkCmdSetDepthClipEnableEXT".as_ptr()));
    VK_CMD_SET_SAMPLE_LOCATIONS_ENABLE_EXT = transmute(dlsym(handle, c"vkCmdSetSampleLocationsEnableEXT".as_ptr()));
    VK_CMD_SET_COLOR_BLEND_ADVANCED_EXT = transmute(dlsym(handle, c"vkCmdSetColorBlendAdvancedEXT".as_ptr()));
    VK_CMD_SET_PROVOKING_VERTEX_MODE_EXT = transmute(dlsym(handle, c"vkCmdSetProvokingVertexModeEXT".as_ptr()));
    VK_CMD_SET_LINE_RASTERIZATION_MODE_EXT = transmute(dlsym(handle, c"vkCmdSetLineRasterizationModeEXT".as_ptr()));
    VK_CMD_SET_LINE_STIPPLE_ENABLE_EXT = transmute(dlsym(handle, c"vkCmdSetLineStippleEnableEXT".as_ptr()));
    VK_CMD_SET_DEPTH_CLIP_NEGATIVE_ONE_TO_ONE_EXT = transmute(dlsym(handle, c"vkCmdSetDepthClipNegativeOneToOneEXT".as_ptr()));
    VK_CMD_SET_VIEWPORT_WSCALING_ENABLE_NV = transmute(dlsym(handle, c"vkCmdSetViewportWScalingEnableNV".as_ptr()));
    VK_CMD_SET_VIEWPORT_SWIZZLE_NV = transmute(dlsym(handle, c"vkCmdSetViewportSwizzleNV".as_ptr()));
    VK_CMD_SET_COVERAGE_TO_COLOR_ENABLE_NV = transmute(dlsym(handle, c"vkCmdSetCoverageToColorEnableNV".as_ptr()));
    VK_CMD_SET_COVERAGE_TO_COLOR_LOCATION_NV = transmute(dlsym(handle, c"vkCmdSetCoverageToColorLocationNV".as_ptr()));
    VK_CMD_SET_COVERAGE_MODULATION_MODE_NV = transmute(dlsym(handle, c"vkCmdSetCoverageModulationModeNV".as_ptr()));
    VK_CMD_SET_COVERAGE_MODULATION_TABLE_ENABLE_NV = transmute(dlsym(handle, c"vkCmdSetCoverageModulationTableEnableNV".as_ptr()));
    VK_CMD_SET_COVERAGE_MODULATION_TABLE_NV = transmute(dlsym(handle, c"vkCmdSetCoverageModulationTableNV".as_ptr()));
    VK_CMD_SET_SHADING_RATE_IMAGE_ENABLE_NV = transmute(dlsym(handle, c"vkCmdSetShadingRateImageEnableNV".as_ptr()));
    VK_CMD_SET_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV = transmute(dlsym(handle, c"vkCmdSetRepresentativeFragmentTestEnableNV".as_ptr()));
    VK_CMD_SET_COVERAGE_REDUCTION_MODE_NV = transmute(dlsym(handle, c"vkCmdSetCoverageReductionModeNV".as_ptr()));
    VK_GET_SHADER_MODULE_IDENTIFIER_EXT = transmute(dlsym(handle, c"vkGetShaderModuleIdentifierEXT".as_ptr()));
    VK_GET_SHADER_MODULE_CREATE_INFO_IDENTIFIER_EXT = transmute(dlsym(handle, c"vkGetShaderModuleCreateInfoIdentifierEXT".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_OPTICAL_FLOW_IMAGE_FORMATS_NV = transmute(dlsym(handle, c"vkGetPhysicalDeviceOpticalFlowImageFormatsNV".as_ptr()));
    VK_CREATE_OPTICAL_FLOW_SESSION_NV = transmute(dlsym(handle, c"vkCreateOpticalFlowSessionNV".as_ptr()));
    VK_DESTROY_OPTICAL_FLOW_SESSION_NV = transmute(dlsym(handle, c"vkDestroyOpticalFlowSessionNV".as_ptr()));
    VK_BIND_OPTICAL_FLOW_SESSION_IMAGE_NV = transmute(dlsym(handle, c"vkBindOpticalFlowSessionImageNV".as_ptr()));
    VK_CMD_OPTICAL_FLOW_EXECUTE_NV = transmute(dlsym(handle, c"vkCmdOpticalFlowExecuteNV".as_ptr()));
    VK_ANTI_LAG_UPDATE_AMD = transmute(dlsym(handle, c"vkAntiLagUpdateAMD".as_ptr()));
    VK_CREATE_SHADERS_EXT = transmute(dlsym(handle, c"vkCreateShadersEXT".as_ptr()));
    VK_DESTROY_SHADER_EXT = transmute(dlsym(handle, c"vkDestroyShaderEXT".as_ptr()));
    VK_GET_SHADER_BINARY_DATA_EXT = transmute(dlsym(handle, c"vkGetShaderBinaryDataEXT".as_ptr()));
    VK_CMD_BIND_SHADERS_EXT = transmute(dlsym(handle, c"vkCmdBindShadersEXT".as_ptr()));
    VK_CMD_SET_DEPTH_CLAMP_RANGE_EXT = transmute(dlsym(handle, c"vkCmdSetDepthClampRangeEXT".as_ptr()));
    VK_GET_FRAMEBUFFER_TILE_PROPERTIES_QCOM = transmute(dlsym(handle, c"vkGetFramebufferTilePropertiesQCOM".as_ptr()));
    VK_GET_DYNAMIC_RENDERING_TILE_PROPERTIES_QCOM = transmute(dlsym(handle, c"vkGetDynamicRenderingTilePropertiesQCOM".as_ptr()));
    VK_SET_LATENCY_SLEEP_MODE_NV = transmute(dlsym(handle, c"vkSetLatencySleepModeNV".as_ptr()));
    VK_LATENCY_SLEEP_NV = transmute(dlsym(handle, c"vkLatencySleepNV".as_ptr()));
    VK_SET_LATENCY_MARKER_NV = transmute(dlsym(handle, c"vkSetLatencyMarkerNV".as_ptr()));
    VK_GET_LATENCY_TIMINGS_NV = transmute(dlsym(handle, c"vkGetLatencyTimingsNV".as_ptr()));
    VK_QUEUE_NOTIFY_OUT_OF_BAND_NV = transmute(dlsym(handle, c"vkQueueNotifyOutOfBandNV".as_ptr()));
    VK_CMD_SET_ATTACHMENT_FEEDBACK_LOOP_ENABLE_EXT = transmute(dlsym(handle, c"vkCmdSetAttachmentFeedbackLoopEnableEXT".as_ptr()));
    VK_GET_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_EXT = transmute(dlsym(handle, c"vkGetGeneratedCommandsMemoryRequirementsEXT".as_ptr()));
    VK_CMD_PREPROCESS_GENERATED_COMMANDS_EXT = transmute(dlsym(handle, c"vkCmdPreprocessGeneratedCommandsEXT".as_ptr()));
    VK_CMD_EXECUTE_GENERATED_COMMANDS_EXT = transmute(dlsym(handle, c"vkCmdExecuteGeneratedCommandsEXT".as_ptr()));
    VK_CREATE_INDIRECT_COMMANDS_LAYOUT_EXT = transmute(dlsym(handle, c"vkCreateIndirectCommandsLayoutEXT".as_ptr()));
    VK_DESTROY_INDIRECT_COMMANDS_LAYOUT_EXT = transmute(dlsym(handle, c"vkDestroyIndirectCommandsLayoutEXT".as_ptr()));
    VK_CREATE_INDIRECT_EXECUTION_SET_EXT = transmute(dlsym(handle, c"vkCreateIndirectExecutionSetEXT".as_ptr()));
    VK_DESTROY_INDIRECT_EXECUTION_SET_EXT = transmute(dlsym(handle, c"vkDestroyIndirectExecutionSetEXT".as_ptr()));
    VK_UPDATE_INDIRECT_EXECUTION_SET_PIPELINE_EXT = transmute(dlsym(handle, c"vkUpdateIndirectExecutionSetPipelineEXT".as_ptr()));
    VK_UPDATE_INDIRECT_EXECUTION_SET_SHADER_EXT = transmute(dlsym(handle, c"vkUpdateIndirectExecutionSetShaderEXT".as_ptr()));
    VK_GET_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FLEXIBLE_DIMENSIONS_PROPERTIES_NV = transmute(dlsym(handle, c"vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV".as_ptr()));
    VK_CREATE_ACCELERATION_STRUCTURE_KHR = transmute(dlsym(handle, c"vkCreateAccelerationStructureKHR".as_ptr()));
    VK_DESTROY_ACCELERATION_STRUCTURE_KHR = transmute(dlsym(handle, c"vkDestroyAccelerationStructureKHR".as_ptr()));
    VK_CMD_BUILD_ACCELERATION_STRUCTURES_KHR = transmute(dlsym(handle, c"vkCmdBuildAccelerationStructuresKHR".as_ptr()));
    VK_CMD_BUILD_ACCELERATION_STRUCTURES_INDIRECT_KHR = transmute(dlsym(handle, c"vkCmdBuildAccelerationStructuresIndirectKHR".as_ptr()));
    VK_BUILD_ACCELERATION_STRUCTURES_KHR = transmute(dlsym(handle, c"vkBuildAccelerationStructuresKHR".as_ptr()));
    VK_COPY_ACCELERATION_STRUCTURE_KHR = transmute(dlsym(handle, c"vkCopyAccelerationStructureKHR".as_ptr()));
    VK_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_KHR = transmute(dlsym(handle, c"vkCopyAccelerationStructureToMemoryKHR".as_ptr()));
    VK_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_KHR = transmute(dlsym(handle, c"vkCopyMemoryToAccelerationStructureKHR".as_ptr()));
    VK_WRITE_ACCELERATION_STRUCTURES_PROPERTIES_KHR = transmute(dlsym(handle, c"vkWriteAccelerationStructuresPropertiesKHR".as_ptr()));
    VK_CMD_COPY_ACCELERATION_STRUCTURE_KHR = transmute(dlsym(handle, c"vkCmdCopyAccelerationStructureKHR".as_ptr()));
    VK_CMD_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_KHR = transmute(dlsym(handle, c"vkCmdCopyAccelerationStructureToMemoryKHR".as_ptr()));
    VK_CMD_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_KHR = transmute(dlsym(handle, c"vkCmdCopyMemoryToAccelerationStructureKHR".as_ptr()));
    VK_GET_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_KHR = transmute(dlsym(handle, c"vkGetAccelerationStructureDeviceAddressKHR".as_ptr()));
    VK_CMD_WRITE_ACCELERATION_STRUCTURES_PROPERTIES_KHR = transmute(dlsym(handle, c"vkCmdWriteAccelerationStructuresPropertiesKHR".as_ptr()));
    VK_GET_DEVICE_ACCELERATION_STRUCTURE_COMPATIBILITY_KHR = transmute(dlsym(handle, c"vkGetDeviceAccelerationStructureCompatibilityKHR".as_ptr()));
    VK_GET_ACCELERATION_STRUCTURE_BUILD_SIZES_KHR = transmute(dlsym(handle, c"vkGetAccelerationStructureBuildSizesKHR".as_ptr()));
    VK_CMD_TRACE_RAYS_KHR = transmute(dlsym(handle, c"vkCmdTraceRaysKHR".as_ptr()));
    VK_CREATE_RAY_TRACING_PIPELINES_KHR = transmute(dlsym(handle, c"vkCreateRayTracingPipelinesKHR".as_ptr()));
    VK_GET_RAY_TRACING_CAPTURE_REPLAY_SHADER_GROUP_HANDLES_KHR = transmute(dlsym(handle, c"vkGetRayTracingCaptureReplayShaderGroupHandlesKHR".as_ptr()));
    VK_CMD_TRACE_RAYS_INDIRECT_KHR = transmute(dlsym(handle, c"vkCmdTraceRaysIndirectKHR".as_ptr()));
    VK_GET_RAY_TRACING_SHADER_GROUP_STACK_SIZE_KHR = transmute(dlsym(handle, c"vkGetRayTracingShaderGroupStackSizeKHR".as_ptr()));
    VK_CMD_SET_RAY_TRACING_PIPELINE_STACK_SIZE_KHR = transmute(dlsym(handle, c"vkCmdSetRayTracingPipelineStackSizeKHR".as_ptr()));
    VK_CMD_DRAW_MESH_TASKS_EXT = transmute(dlsym(handle, c"vkCmdDrawMeshTasksEXT".as_ptr()));
    VK_CMD_DRAW_MESH_TASKS_INDIRECT_EXT = transmute(dlsym(handle, c"vkCmdDrawMeshTasksIndirectEXT".as_ptr()));
    VK_CMD_DRAW_MESH_TASKS_INDIRECT_COUNT_EXT = transmute(dlsym(handle, c"vkCmdDrawMeshTasksIndirectCountEXT".as_ptr()));
}